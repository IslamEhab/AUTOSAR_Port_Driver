
AUTOSAR_Port_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a34  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08001be0  08001be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d80  08001d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08001d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000058  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000070  20000070  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000626a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000108b  00000000  00000000  000262b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004b0  00000000  00000000  00027340  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b8  00000000  00000000  000277f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002221  00000000  00000000  00027ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000060b3  00000000  00000000  00029dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002fe7c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001000  00000000  00000000  0002fef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030ef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001bc8 	.word	0x08001bc8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08001bc8 	.word	0x08001bc8

080001ec <Det_ReportError>:

Std_ReturnType Det_ReportError( uint16 ModuleId,
                      uint8 InstanceId,
                      uint8 ApiId,
                      uint8 ErrorId )
{
 80001ec:	b490      	push	{r4, r7}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4604      	mov	r4, r0
 80001f4:	4608      	mov	r0, r1
 80001f6:	4611      	mov	r1, r2
 80001f8:	461a      	mov	r2, r3
 80001fa:	4623      	mov	r3, r4
 80001fc:	80fb      	strh	r3, [r7, #6]
 80001fe:	4603      	mov	r3, r0
 8000200:	717b      	strb	r3, [r7, #5]
 8000202:	460b      	mov	r3, r1
 8000204:	713b      	strb	r3, [r7, #4]
 8000206:	4613      	mov	r3, r2
 8000208:	70fb      	strb	r3, [r7, #3]
    Det_ModuleId = ModuleId; 
 800020a:	4a09      	ldr	r2, [pc, #36]	; (8000230 <Det_ReportError+0x44>)
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	8013      	strh	r3, [r2, #0]
    Det_InstanceId = InstanceId;
 8000210:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Det_ReportError+0x48>)
 8000212:	797b      	ldrb	r3, [r7, #5]
 8000214:	7013      	strb	r3, [r2, #0]
    Det_ApiId = ApiId; 
 8000216:	4a08      	ldr	r2, [pc, #32]	; (8000238 <Det_ReportError+0x4c>)
 8000218:	793b      	ldrb	r3, [r7, #4]
 800021a:	7013      	strb	r3, [r2, #0]
    Det_ErrorId = ErrorId;
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <Det_ReportError+0x50>)
 800021e:	78fb      	ldrb	r3, [r7, #3]
 8000220:	7013      	strb	r3, [r2, #0]
    return E_OK;
 8000222:	2300      	movs	r3, #0
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bc90      	pop	{r4, r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000034 	.word	0x20000034
 8000234:	20000036 	.word	0x20000036
 8000238:	20000037 	.word	0x20000037
 800023c:	20000038 	.word	0x20000038

08000240 <Dio_ReadChannel>:
 * @return					 Level of the channel
 * @note  	Return Value: 	 Dio_LevelType
 * @param   (in): ChannelId - ID of DIO channel.
 ***********************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
	volatile uint32 * Port_Ptr = NULL_PTR;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
	boolean error = FALSE;
 800024e:	2300      	movs	r3, #0
 8000250:	72fb      	strb	r3, [r7, #11]

	/* output variable to read channel value */
	uint8 output = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	72bb      	strb	r3, [r7, #10]
	 * Note: This Error detection is removed in AUTOSAR 4.3.1
	*/


	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b06      	cmp	r3, #6
 800025a:	d907      	bls.n	800026c <Dio_ReadChannel+0x2c>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 800025c:	230a      	movs	r3, #10
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	2078      	movs	r0, #120	; 0x78
 8000264:	f7ff ffc2 	bl	80001ec <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 8000268:	2301      	movs	r3, #1
 800026a:	72fb      	strb	r3, [r7, #11]
	{
		/* No Action Required */
	}

	/* Check if the given Port is within specified values */
	if (DIO_PORTH < Dio_PortChannels[ChannelId].Port_Num )
 800026c:	4b2f      	ldr	r3, [pc, #188]	; (800032c <Dio_ReadChannel+0xec>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	4413      	add	r3, r2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b07      	cmp	r3, #7
 800027a:	d907      	bls.n	800028c <Dio_ReadChannel+0x4c>
	{
		/* Port Given is more than specified on This HW, Report a DIO_E_PARAM_INVALID_PORT_ID DET Error */
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 800027c:	2314      	movs	r3, #20
 800027e:	2200      	movs	r2, #0
 8000280:	2100      	movs	r1, #0
 8000282:	2078      	movs	r0, #120	; 0x78
 8000284:	f7ff ffb2 	bl	80001ec <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_PORT_ID);

		/* Set Error variable to true */
		error = TRUE;
 8000288:	2301      	movs	r3, #1
 800028a:	72fb      	strb	r3, [r7, #11]
	}

#endif

	/* In-case there are no errors */
	if(FALSE == error)
 800028c:	7afb      	ldrb	r3, [r7, #11]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d146      	bne.n	8000320 <Dio_ReadChannel+0xe0>
	{
		/* Point to the correct PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 8000292:	4b26      	ldr	r3, [pc, #152]	; (800032c <Dio_ReadChannel+0xec>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b07      	cmp	r3, #7
 80002a0:	d82a      	bhi.n	80002f8 <Dio_ReadChannel+0xb8>
 80002a2:	a201      	add	r2, pc, #4	; (adr r2, 80002a8 <Dio_ReadChannel+0x68>)
 80002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a8:	080002c9 	.word	0x080002c9
 80002ac:	080002cf 	.word	0x080002cf
 80002b0:	080002d5 	.word	0x080002d5
 80002b4:	080002db 	.word	0x080002db
 80002b8:	080002e1 	.word	0x080002e1
 80002bc:	080002e7 	.word	0x080002e7
 80002c0:	080002ed 	.word	0x080002ed
 80002c4:	080002f3 	.word	0x080002f3
		{
		case DIO_PORTA:    Port_Ptr = (volatile uint32*)GPIO_PORTA_BASE_ADDRESS;
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <Dio_ReadChannel+0xf0>)
 80002ca:	60fb      	str	r3, [r7, #12]
		break;
 80002cc:	e014      	b.n	80002f8 <Dio_ReadChannel+0xb8>
		case DIO_PORTB:    Port_Ptr = (volatile uint32*)GPIO_PORTB_BASE_ADDRESS;
 80002ce:	4b19      	ldr	r3, [pc, #100]	; (8000334 <Dio_ReadChannel+0xf4>)
 80002d0:	60fb      	str	r3, [r7, #12]
		break;
 80002d2:	e011      	b.n	80002f8 <Dio_ReadChannel+0xb8>
		case DIO_PORTC:    Port_Ptr = (volatile uint32*)GPIO_PORTC_BASE_ADDRESS;
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <Dio_ReadChannel+0xf8>)
 80002d6:	60fb      	str	r3, [r7, #12]
		break;
 80002d8:	e00e      	b.n	80002f8 <Dio_ReadChannel+0xb8>
		case DIO_PORTD:    Port_Ptr = (volatile uint32*)GPIO_PORTD_BASE_ADDRESS;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <Dio_ReadChannel+0xfc>)
 80002dc:	60fb      	str	r3, [r7, #12]
		break;
 80002de:	e00b      	b.n	80002f8 <Dio_ReadChannel+0xb8>
		case DIO_PORTE:    Port_Ptr = (volatile uint32*)GPIO_PORTE_BASE_ADDRESS;
 80002e0:	4b17      	ldr	r3, [pc, #92]	; (8000340 <Dio_ReadChannel+0x100>)
 80002e2:	60fb      	str	r3, [r7, #12]
		break;
 80002e4:	e008      	b.n	80002f8 <Dio_ReadChannel+0xb8>

/************ These 2 Ports are only available on STM32F429 not in STM32F407 ************/
#ifdef STM32F429
		case DIO_PORTF:    Port_Ptr = (volatile uint32*)GPIO_PORTF_BASE_ADDRESS;
 80002e6:	4b17      	ldr	r3, [pc, #92]	; (8000344 <Dio_ReadChannel+0x104>)
 80002e8:	60fb      	str	r3, [r7, #12]
		break;
 80002ea:	e005      	b.n	80002f8 <Dio_ReadChannel+0xb8>
		case DIO_PORTG:    Port_Ptr = (volatile uint32*)GPIO_PORTG_BASE_ADDRESS;
 80002ec:	4b16      	ldr	r3, [pc, #88]	; (8000348 <Dio_ReadChannel+0x108>)
 80002ee:	60fb      	str	r3, [r7, #12]
		break;
 80002f0:	e002      	b.n	80002f8 <Dio_ReadChannel+0xb8>
#endif
/****************************************************************************************/

		case DIO_PORTH:    Port_Ptr = (volatile uint32*)GPIO_PORTH_BASE_ADDRESS;
 80002f2:	4b16      	ldr	r3, [pc, #88]	; (800034c <Dio_ReadChannel+0x10c>)
 80002f4:	60fb      	str	r3, [r7, #12]
		break;
 80002f6:	bf00      	nop
		 * Second the whole pointer is type casted again to uint32*
		 * Lastly the last asterisk on the left is used to dereference the pointer
	    */

		/* Check if the bit value is High */
		if(BIT_IS_SET(*(volatile uint32*)((volatile uint8*)Port_Ptr + DIO_INPUT_DATA_REGISTER_OFFSET), Dio_PortChannels[ChannelId].Ch_Num) )
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	3310      	adds	r3, #16
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <Dio_ReadChannel+0xec>)
 8000300:	6811      	ldr	r1, [r2, #0]
 8000302:	79fa      	ldrb	r2, [r7, #7]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	440a      	add	r2, r1
 8000308:	7852      	ldrb	r2, [r2, #1]
 800030a:	4611      	mov	r1, r2
 800030c:	2201      	movs	r2, #1
 800030e:	408a      	lsls	r2, r1
 8000310:	4013      	ands	r3, r2
 8000312:	2b00      	cmp	r3, #0
 8000314:	d002      	beq.n	800031c <Dio_ReadChannel+0xdc>
		{
			/* Bit value is high, save its value on output variable */
			output = STD_HIGH;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
 800031a:	e001      	b.n	8000320 <Dio_ReadChannel+0xe0>
		}
		else
		{
			/* Bit value is low, save its value on output variable */
			output = STD_LOW;
 800031c:	2300      	movs	r3, #0
 800031e:	72bb      	strb	r3, [r7, #10]
	{
		/* No Action Required */
	}

	/* Return Channel Value */
	return output;
 8000320:	7abb      	ldrb	r3, [r7, #10]

}
 8000322:	4618      	mov	r0, r3
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000000 	.word	0x20000000
 8000330:	40020000 	.word	0x40020000
 8000334:	40020400 	.word	0x40020400
 8000338:	40020800 	.word	0x40020800
 800033c:	40020c00 	.word	0x40020c00
 8000340:	40021000 	.word	0x40021000
 8000344:	40021400 	.word	0x40021400
 8000348:	40021800 	.word	0x40021800
 800034c:	40021c00 	.word	0x40021c00

08000350 <Dio_WriteChannel>:
 * @note  	Return Value:		None
 * @param	 (in): ChannelId - ID of DIO channel.
 * @param	 (in): Level - Value to be written.
 ***********************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	460a      	mov	r2, r1
 800035a:	71fb      	strb	r3, [r7, #7]
 800035c:	4613      	mov	r3, r2
 800035e:	71bb      	strb	r3, [r7, #6]
	volatile uint32 * Port_Ptr = NULL_PTR;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
	boolean error = FALSE;
 8000364:	2300      	movs	r3, #0
 8000366:	72fb      	strb	r3, [r7, #11]
	 * Note: This Error detection is removed in AUTOSAR 4.3.1
	*/


	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b06      	cmp	r3, #6
 800036c:	d907      	bls.n	800037e <Dio_WriteChannel+0x2e>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 800036e:	230a      	movs	r3, #10
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	2078      	movs	r0, #120	; 0x78
 8000376:	f7ff ff39 	bl	80001ec <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 800037a:	2301      	movs	r3, #1
 800037c:	72fb      	strb	r3, [r7, #11]
	{
		/* No Action Required */
	}

	/* Check if the given Port is within specified values */
	if ( DIO_PORTH < Dio_PortChannels[ChannelId].Port_Num )
 800037e:	4b39      	ldr	r3, [pc, #228]	; (8000464 <Dio_WriteChannel+0x114>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	4413      	add	r3, r2
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b07      	cmp	r3, #7
 800038c:	d907      	bls.n	800039e <Dio_WriteChannel+0x4e>
	{
		/* Port Given is more than specified on This HW, Report a DIO_E_PARAM_INVALID_PORT_ID DET Error */
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 800038e:	2314      	movs	r3, #20
 8000390:	2200      	movs	r2, #0
 8000392:	2100      	movs	r1, #0
 8000394:	2078      	movs	r0, #120	; 0x78
 8000396:	f7ff ff29 	bl	80001ec <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_PORT_ID);

		/* Set Error variable to true */
		error = TRUE;
 800039a:	2301      	movs	r3, #1
 800039c:	72fb      	strb	r3, [r7, #11]
	}

#endif

	/* In-case there are no errors */
	if(FALSE == error)
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d15a      	bne.n	800045a <Dio_WriteChannel+0x10a>
	{
		/* Point to the correct PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 80003a4:	4b2f      	ldr	r3, [pc, #188]	; (8000464 <Dio_WriteChannel+0x114>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	4413      	add	r3, r2
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	d82b      	bhi.n	800040c <Dio_WriteChannel+0xbc>
 80003b4:	a201      	add	r2, pc, #4	; (adr r2, 80003bc <Dio_WriteChannel+0x6c>)
 80003b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ba:	bf00      	nop
 80003bc:	080003dd 	.word	0x080003dd
 80003c0:	080003e3 	.word	0x080003e3
 80003c4:	080003e9 	.word	0x080003e9
 80003c8:	080003ef 	.word	0x080003ef
 80003cc:	080003f5 	.word	0x080003f5
 80003d0:	080003fb 	.word	0x080003fb
 80003d4:	08000401 	.word	0x08000401
 80003d8:	08000407 	.word	0x08000407
		{
		case DIO_PORTA:    Port_Ptr = (volatile uint32*)GPIO_PORTA_BASE_ADDRESS;
 80003dc:	4b22      	ldr	r3, [pc, #136]	; (8000468 <Dio_WriteChannel+0x118>)
 80003de:	60fb      	str	r3, [r7, #12]
		break;
 80003e0:	e014      	b.n	800040c <Dio_WriteChannel+0xbc>
		case DIO_PORTB:    Port_Ptr = (volatile uint32*)GPIO_PORTB_BASE_ADDRESS;
 80003e2:	4b22      	ldr	r3, [pc, #136]	; (800046c <Dio_WriteChannel+0x11c>)
 80003e4:	60fb      	str	r3, [r7, #12]
		break;
 80003e6:	e011      	b.n	800040c <Dio_WriteChannel+0xbc>
		case DIO_PORTC:    Port_Ptr = (volatile uint32*)GPIO_PORTC_BASE_ADDRESS;
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <Dio_WriteChannel+0x120>)
 80003ea:	60fb      	str	r3, [r7, #12]
		break;
 80003ec:	e00e      	b.n	800040c <Dio_WriteChannel+0xbc>
		case DIO_PORTD:    Port_Ptr = (volatile uint32*)GPIO_PORTD_BASE_ADDRESS;
 80003ee:	4b21      	ldr	r3, [pc, #132]	; (8000474 <Dio_WriteChannel+0x124>)
 80003f0:	60fb      	str	r3, [r7, #12]
		break;
 80003f2:	e00b      	b.n	800040c <Dio_WriteChannel+0xbc>
		case DIO_PORTE:    Port_Ptr = (volatile uint32*)GPIO_PORTE_BASE_ADDRESS;
 80003f4:	4b20      	ldr	r3, [pc, #128]	; (8000478 <Dio_WriteChannel+0x128>)
 80003f6:	60fb      	str	r3, [r7, #12]
		break;
 80003f8:	e008      	b.n	800040c <Dio_WriteChannel+0xbc>

/************ These 2 Ports are only available on STM32F429 not in STM32F407 ************/
#ifdef STM32F429
		case DIO_PORTF:    Port_Ptr = (volatile uint32*)GPIO_PORTF_BASE_ADDRESS;
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <Dio_WriteChannel+0x12c>)
 80003fc:	60fb      	str	r3, [r7, #12]
		break;
 80003fe:	e005      	b.n	800040c <Dio_WriteChannel+0xbc>
		case DIO_PORTG:    Port_Ptr = (volatile uint32*)GPIO_PORTG_BASE_ADDRESS;
 8000400:	4b1f      	ldr	r3, [pc, #124]	; (8000480 <Dio_WriteChannel+0x130>)
 8000402:	60fb      	str	r3, [r7, #12]
		break;
 8000404:	e002      	b.n	800040c <Dio_WriteChannel+0xbc>
#endif
/****************************************************************************************/

		case DIO_PORTH:    Port_Ptr = (volatile uint32*)GPIO_PORTH_BASE_ADDRESS;
 8000406:	4b1f      	ldr	r3, [pc, #124]	; (8000484 <Dio_WriteChannel+0x134>)
 8000408:	60fb      	str	r3, [r7, #12]
		break;
 800040a:	bf00      	nop
		}
		if(Level == STD_HIGH)
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d110      	bne.n	8000434 <Dio_WriteChannel+0xe4>
			 * Second the whole pointer is type casted again to uint32*
			 * Lastly the last asterisk on the left is used to dereference the pointer
		    */

			/* Write Logic High */
			SET_BIT( *(volatile uint32*)((volatile uint8*)Port_Ptr + DIO_BIT_SET_REGISTER_OFFSET), Dio_PortChannels[ChannelId].Ch_Num);
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3318      	adds	r3, #24
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	3218      	adds	r2, #24
 800041a:	6812      	ldr	r2, [r2, #0]
 800041c:	4911      	ldr	r1, [pc, #68]	; (8000464 <Dio_WriteChannel+0x114>)
 800041e:	6808      	ldr	r0, [r1, #0]
 8000420:	79f9      	ldrb	r1, [r7, #7]
 8000422:	0049      	lsls	r1, r1, #1
 8000424:	4401      	add	r1, r0
 8000426:	7849      	ldrb	r1, [r1, #1]
 8000428:	4608      	mov	r0, r1
 800042a:	2101      	movs	r1, #1
 800042c:	4081      	lsls	r1, r0
 800042e:	430a      	orrs	r2, r1
 8000430:	601a      	str	r2, [r3, #0]
	else
	{
		/* No Action Required */
	}

}
 8000432:	e012      	b.n	800045a <Dio_WriteChannel+0x10a>
		else if(Level == STD_LOW)
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d10f      	bne.n	800045a <Dio_WriteChannel+0x10a>
			SET_BIT( *(volatile uint32*)((volatile uint8*)Port_Ptr + DIO_BIT_CLEAR_REGISTER_OFFSET), Dio_PortChannels[ChannelId].Ch_Num );
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	331a      	adds	r3, #26
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	321a      	adds	r2, #26
 8000442:	6812      	ldr	r2, [r2, #0]
 8000444:	4907      	ldr	r1, [pc, #28]	; (8000464 <Dio_WriteChannel+0x114>)
 8000446:	6808      	ldr	r0, [r1, #0]
 8000448:	79f9      	ldrb	r1, [r7, #7]
 800044a:	0049      	lsls	r1, r1, #1
 800044c:	4401      	add	r1, r0
 800044e:	7849      	ldrb	r1, [r1, #1]
 8000450:	4608      	mov	r0, r1
 8000452:	2101      	movs	r1, #1
 8000454:	4081      	lsls	r1, r0
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000000 	.word	0x20000000
 8000468:	40020000 	.word	0x40020000
 800046c:	40020400 	.word	0x40020400
 8000470:	40020800 	.word	0x40020800
 8000474:	40020c00 	.word	0x40020c00
 8000478:	40021000 	.word	0x40021000
 800047c:	40021400 	.word	0x40021400
 8000480:	40021800 	.word	0x40021800
 8000484:	40021c00 	.word	0x40021c00

08000488 <Dio_FlipChannel>:
 * @note  	Return Value: 		None
 * @param	(in): ChannelId - Holds th channel number
 ***********************************************************************************/
#if (DIO_FLIP_CHANNEL_API == STD_ON)
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	volatile uint32 * Port_Ptr = NULL_PTR;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
	boolean error = FALSE;
 8000496:	2300      	movs	r3, #0
 8000498:	72fb      	strb	r3, [r7, #11]

	/* Temp variable to get bit value */
	uint8 output = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	72bb      	strb	r3, [r7, #10]
	 * Note: This Error detection is removed in AUTOSAR 4.3.1
	*/


	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2b06      	cmp	r3, #6
 80004a2:	d907      	bls.n	80004b4 <Dio_FlipChannel+0x2c>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 80004a4:	230a      	movs	r3, #10
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2078      	movs	r0, #120	; 0x78
 80004ac:	f7ff fe9e 	bl	80001ec <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 80004b0:	2301      	movs	r3, #1
 80004b2:	72fb      	strb	r3, [r7, #11]
	/*
	 * Check if the given Port is within specified values
	 * Checking with PORTH Value because it is the biggest one
	 * (Last Port available on HW)
	*/
	if ( DIO_PORTH < Dio_PortChannels[ChannelId].Port_Num )
 80004b4:	4b37      	ldr	r3, [pc, #220]	; (8000594 <Dio_FlipChannel+0x10c>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	d907      	bls.n	80004d4 <Dio_FlipChannel+0x4c>
	{
		/* Port Given is more than specified on This HW, Report a DIO_E_PARAM_INVALID_PORT_ID DET Error */
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 80004c4:	2314      	movs	r3, #20
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	2078      	movs	r0, #120	; 0x78
 80004cc:	f7ff fe8e 	bl	80001ec <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_PORT_ID);

		/* Set Error variable to true */
		error = TRUE;
 80004d0:	2301      	movs	r3, #1
 80004d2:	72fb      	strb	r3, [r7, #11]
	}

#endif

	/* In-case there are no errors */
	if(FALSE == error)
 80004d4:	7afb      	ldrb	r3, [r7, #11]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d156      	bne.n	8000588 <Dio_FlipChannel+0x100>
	{
		/* Point to the correct PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 80004da:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <Dio_FlipChannel+0x10c>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	4413      	add	r3, r2
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b07      	cmp	r3, #7
 80004e8:	d82a      	bhi.n	8000540 <Dio_FlipChannel+0xb8>
 80004ea:	a201      	add	r2, pc, #4	; (adr r2, 80004f0 <Dio_FlipChannel+0x68>)
 80004ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f0:	08000511 	.word	0x08000511
 80004f4:	08000517 	.word	0x08000517
 80004f8:	0800051d 	.word	0x0800051d
 80004fc:	08000523 	.word	0x08000523
 8000500:	08000529 	.word	0x08000529
 8000504:	0800052f 	.word	0x0800052f
 8000508:	08000535 	.word	0x08000535
 800050c:	0800053b 	.word	0x0800053b
		{
		case DIO_PORTA:    Port_Ptr = (volatile uint32*)GPIO_PORTA_BASE_ADDRESS;
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <Dio_FlipChannel+0x110>)
 8000512:	60fb      	str	r3, [r7, #12]
		break;
 8000514:	e014      	b.n	8000540 <Dio_FlipChannel+0xb8>
		case DIO_PORTB:    Port_Ptr = (volatile uint32*)GPIO_PORTB_BASE_ADDRESS;
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <Dio_FlipChannel+0x114>)
 8000518:	60fb      	str	r3, [r7, #12]
		break;
 800051a:	e011      	b.n	8000540 <Dio_FlipChannel+0xb8>
		case DIO_PORTC:    Port_Ptr = (volatile uint32*)GPIO_PORTC_BASE_ADDRESS;
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <Dio_FlipChannel+0x118>)
 800051e:	60fb      	str	r3, [r7, #12]
		break;
 8000520:	e00e      	b.n	8000540 <Dio_FlipChannel+0xb8>
		case DIO_PORTD:    Port_Ptr = (volatile uint32*)GPIO_PORTD_BASE_ADDRESS;
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <Dio_FlipChannel+0x11c>)
 8000524:	60fb      	str	r3, [r7, #12]
		break;
 8000526:	e00b      	b.n	8000540 <Dio_FlipChannel+0xb8>
		case DIO_PORTE:    Port_Ptr = (volatile uint32*)GPIO_PORTE_BASE_ADDRESS;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <Dio_FlipChannel+0x120>)
 800052a:	60fb      	str	r3, [r7, #12]
		break;
 800052c:	e008      	b.n	8000540 <Dio_FlipChannel+0xb8>
/************ These 2 Ports are only available on STM32F429 not in STM32F407 ************/
#ifdef STM32F429
		case DIO_PORTF:    Port_Ptr = (volatile uint32*)GPIO_PORTF_BASE_ADDRESS;
 800052e:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <Dio_FlipChannel+0x124>)
 8000530:	60fb      	str	r3, [r7, #12]
		break;
 8000532:	e005      	b.n	8000540 <Dio_FlipChannel+0xb8>
		case DIO_PORTG:    Port_Ptr = (volatile uint32*)GPIO_PORTG_BASE_ADDRESS;
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <Dio_FlipChannel+0x128>)
 8000536:	60fb      	str	r3, [r7, #12]
		break;
 8000538:	e002      	b.n	8000540 <Dio_FlipChannel+0xb8>
#endif
/****************************************************************************************/

		break;
		case DIO_PORTH:    Port_Ptr = (volatile uint32*)GPIO_PORTH_BASE_ADDRESS;
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <Dio_FlipChannel+0x12c>)
 800053c:	60fb      	str	r3, [r7, #12]
		break;
 800053e:	bf00      	nop
		}

		/* Toggle Selected pin */
		TOGGLE_BIT( *(volatile uint32*)((volatile uint8*)Port_Ptr + DIO_OUTPUT_DATA_REGISTER_OFFSET), Dio_PortChannels[ChannelId].Ch_Num  );
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3314      	adds	r3, #20
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	3214      	adds	r2, #20
 8000548:	6812      	ldr	r2, [r2, #0]
 800054a:	4912      	ldr	r1, [pc, #72]	; (8000594 <Dio_FlipChannel+0x10c>)
 800054c:	6808      	ldr	r0, [r1, #0]
 800054e:	79f9      	ldrb	r1, [r7, #7]
 8000550:	0049      	lsls	r1, r1, #1
 8000552:	4401      	add	r1, r0
 8000554:	7849      	ldrb	r1, [r1, #1]
 8000556:	4608      	mov	r0, r1
 8000558:	2101      	movs	r1, #1
 800055a:	4081      	lsls	r1, r0
 800055c:	404a      	eors	r2, r1
 800055e:	601a      	str	r2, [r3, #0]

		/* Get Bit Value after toggling */

		/* Check if the bit value is High */
		if(BIT_IS_SET(*(volatile uint32*)((volatile uint8*)Port_Ptr + DIO_OUTPUT_DATA_REGISTER_OFFSET), Dio_PortChannels[ChannelId].Ch_Num) )
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3314      	adds	r3, #20
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <Dio_FlipChannel+0x10c>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	0052      	lsls	r2, r2, #1
 800056e:	440a      	add	r2, r1
 8000570:	7852      	ldrb	r2, [r2, #1]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4013      	ands	r3, r2
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <Dio_FlipChannel+0xfc>
		{
			/* Bit value is high, save its value on output variable */
			output = STD_HIGH;
 800057e:	2301      	movs	r3, #1
 8000580:	72bb      	strb	r3, [r7, #10]
 8000582:	e001      	b.n	8000588 <Dio_FlipChannel+0x100>
		}
		else
		{
			/* Bit value is low, save its value on output variable */
			output = STD_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	72bb      	strb	r3, [r7, #10]
	{
		/* No Action Required */
	}

	/* Return Bit value */
	return output;
 8000588:	7abb      	ldrb	r3, [r7, #10]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000
 8000598:	40020000 	.word	0x40020000
 800059c:	40020400 	.word	0x40020400
 80005a0:	40020800 	.word	0x40020800
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40021400 	.word	0x40021400
 80005b0:	40021800 	.word	0x40021800
 80005b4:	40021c00 	.word	0x40021c00

080005b8 <Port_Init>:
 * Parameters (out):     None
 * Return value:         None
 * Description:          Function to initialize the port driver Module
 ************************************************************************************/
void Port_Init(const Port_ConfigType* ConfigPtr)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	 * Pointer to Requested Port Register
	 * Note: Type of Pointer is GPIO_REG which is a structure
	 * holds all GPIO registers with their offsets by saving them
	 * in the struct with their arrangement in the data sheet
	*/
	volatile GPIO_REG* PortGpio_Ptr = NULL_PTR;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]

	/* Variable to iterate on it */
	uint8 counter = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	72fb      	strb	r3, [r7, #11]

	/* Check if DET Error is enabled or not through configuration tool */
#if(PORT_DEV_ERROR_DETECT == STD_ON)

	/* Check if the input configuration pointer to structure is Not a Null Pointer (wrong Parameter) */
	if(NULL_PTR == ConfigPtr)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <Port_Init+0x24>
	{
		/* ConfigPtr is a Null Pointer, Report a DET Error as a PORT_E_INIT_FAILED */
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID, PORT_E_INIT_FAILED);
 80005ce:	230c      	movs	r3, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	2100      	movs	r1, #0
 80005d4:	207c      	movs	r0, #124	; 0x7c
 80005d6:	f7ff fe09 	bl	80001ec <Det_ReportError>
		/*
		 * As SWS Said, if a Null pointer found, Function should report an DET Error
		 * and return without any action
		 */

		return;
 80005da:	e23a      	b.n	8000a52 <Port_Init+0x49a>
		/*
		 * Point to the first channel of the first element
		 * of the array of post built configuration structure
		 * (portChannels[0])
		 */
		Port_Channels = ConfigPtr -> portChannels;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a7f      	ldr	r2, [pc, #508]	; (80007dc <Port_Init+0x224>)
 80005e0:	6013      	str	r3, [r2, #0]

		/* Initiate All Ports Registers before using them */
		Port_RegInit();
 80005e2:	f000 fa3d 	bl	8000a60 <Port_RegInit>

		/* For Loop to iterate through Channels */
		for(counter = 0; counter < PORT_CONFIGURED_CHANNLES; counter++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	72fb      	strb	r3, [r7, #11]
 80005ea:	e22b      	b.n	8000a44 <Port_Init+0x48c>
		{

			switch(Port_Channels[counter].portNum)
 80005ec:	4b7b      	ldr	r3, [pc, #492]	; (80007dc <Port_Init+0x224>)
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	7afa      	ldrb	r2, [r7, #11]
 80005f2:	4613      	mov	r3, r2
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	440b      	add	r3, r1
 80005fc:	785b      	ldrb	r3, [r3, #1]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	d82a      	bhi.n	8000658 <Port_Init+0xa0>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <Port_Init+0x50>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000629 	.word	0x08000629
 800060c:	0800062f 	.word	0x0800062f
 8000610:	08000635 	.word	0x08000635
 8000614:	0800063b 	.word	0x0800063b
 8000618:	08000641 	.word	0x08000641
 800061c:	08000647 	.word	0x08000647
 8000620:	0800064d 	.word	0x0800064d
 8000624:	08000653 	.word	0x08000653
			{
			/* Point the pointer to PORTA Base Address */
			case PORTA:	PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTA_BASE_ADDRESS;
 8000628:	4b6d      	ldr	r3, [pc, #436]	; (80007e0 <Port_Init+0x228>)
 800062a:	60fb      	str	r3, [r7, #12]
			break;
 800062c:	e014      	b.n	8000658 <Port_Init+0xa0>

			/* Point the pointer to PORTB Base Address */
			case PORTB:	PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTB_BASE_ADDRESS;
 800062e:	4b6d      	ldr	r3, [pc, #436]	; (80007e4 <Port_Init+0x22c>)
 8000630:	60fb      	str	r3, [r7, #12]
			break;
 8000632:	e011      	b.n	8000658 <Port_Init+0xa0>

			/* Point the pointer to PORTC Base Address */
			case PORTC:	PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTC_BASE_ADDRESS;
 8000634:	4b6c      	ldr	r3, [pc, #432]	; (80007e8 <Port_Init+0x230>)
 8000636:	60fb      	str	r3, [r7, #12]
			break;
 8000638:	e00e      	b.n	8000658 <Port_Init+0xa0>

			/* Point the pointer to PORTD Base Address */
			case PORTD:	PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTD_BASE_ADDRESS;
 800063a:	4b6c      	ldr	r3, [pc, #432]	; (80007ec <Port_Init+0x234>)
 800063c:	60fb      	str	r3, [r7, #12]
			break;
 800063e:	e00b      	b.n	8000658 <Port_Init+0xa0>

			/* Point the pointer to PORTE Base Address */
			case PORTE:	PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTE_BASE_ADDRESS;
 8000640:	4b6b      	ldr	r3, [pc, #428]	; (80007f0 <Port_Init+0x238>)
 8000642:	60fb      	str	r3, [r7, #12]
			break;
 8000644:	e008      	b.n	8000658 <Port_Init+0xa0>

/************ These 2 Ports are only available on STM32F429 not in STM32F407 ************/
#ifdef STM32F429

			/* Point the pointer to PORTF Base Address */
			case PORTF: PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTF_BASE_ADDRESS;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <Port_Init+0x23c>)
 8000648:	60fb      	str	r3, [r7, #12]
			break;
 800064a:	e005      	b.n	8000658 <Port_Init+0xa0>

			/* Point the pointer to PORTG Base Address */
			case PORTG: PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTG_BASE_ADDRESS;
 800064c:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <Port_Init+0x240>)
 800064e:	60fb      	str	r3, [r7, #12]
			break;
 8000650:	e002      	b.n	8000658 <Port_Init+0xa0>
#endif
/****************************************************************************************/
			/* Point the pointer to PORTF Base Address */
			case PORTH: PortGpio_Ptr = (volatile GPIO_REG*)(volatile GPIO_REG*)GPIO_PORTH_BASE_ADDRESS;
 8000652:	4b6a      	ldr	r3, [pc, #424]	; (80007fc <Port_Init+0x244>)
 8000654:	60fb      	str	r3, [r7, #12]
			break;
 8000656:	bf00      	nop
			/*
			 * Check if the pin is not on the default mode
			 * if it is on default mode, Nothing of GPIO Configuration sequence will happen
			 * Which means the pin will be not usable in this application
			 */
			if(Port_Channels[counter].direction != PORT_PIN_DEFAULT)
 8000658:	4b60      	ldr	r3, [pc, #384]	; (80007dc <Port_Init+0x224>)
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	7afa      	ldrb	r2, [r7, #11]
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	440b      	add	r3, r1
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	2b02      	cmp	r3, #2
 800066c:	f000 81e7 	beq.w	8000a3e <Port_Init+0x486>
			{
				if( (Port_Channels[counter].mode == ANALOG_MODE_SELECTED) )
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <Port_Init+0x224>)
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	7afa      	ldrb	r2, [r7, #11]
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	440b      	add	r3, r1
 8000680:	78db      	ldrb	r3, [r3, #3]
 8000682:	2b10      	cmp	r3, #16
 8000684:	d122      	bne.n	80006cc <Port_Init+0x114>
					 * Set MODER corresponding bits for the Pin = 3
					 * as analog mode
					 * By left shift the value by the pin number * 2
					 * because every pin has 2 bits
					*/
					PortGpio_Ptr -> MODER = ( ( (PortGpio_Ptr -> MODER) & (~(MODER_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) ) \
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6819      	ldr	r1, [r3, #0]
 800068a:	4b54      	ldr	r3, [pc, #336]	; (80007dc <Port_Init+0x224>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	7afa      	ldrb	r2, [r7, #11]
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4403      	add	r3, r0
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	2203      	movs	r2, #3
 80006a0:	fa02 f303 	lsl.w	r3, r2, r3
 80006a4:	43db      	mvns	r3, r3
 80006a6:	4019      	ands	r1, r3
																| ( (MODER_REGISTER_ANALOG_MODE << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) );
 80006a8:	4b4c      	ldr	r3, [pc, #304]	; (80007dc <Port_Init+0x224>)
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	7afa      	ldrb	r2, [r7, #11]
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4403      	add	r3, r0
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	2203      	movs	r2, #3
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	ea41 0203 	orr.w	r2, r1, r3
					PortGpio_Ptr -> MODER = ( ( (PortGpio_Ptr -> MODER) & (~(MODER_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) ) \
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	e0d5      	b.n	8000878 <Port_Init+0x2c0>
					 * Normal Digital Mode
					 * Start Digital Mode initiation procedure
					 */

					/* Check if Alternative function selected or not*/
					if( (Port_Channels[counter].mode == DIO_PIN) )
 80006cc:	4b43      	ldr	r3, [pc, #268]	; (80007dc <Port_Init+0x224>)
 80006ce:	6819      	ldr	r1, [r3, #0]
 80006d0:	7afa      	ldrb	r2, [r7, #11]
 80006d2:	4613      	mov	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	440b      	add	r3, r1
 80006dc:	78db      	ldrb	r3, [r3, #3]
 80006de:	2b11      	cmp	r3, #17
 80006e0:	d122      	bne.n	8000728 <Port_Init+0x170>
						 * Set MODER corresponding bits for the Pin = 1
						 * as general purpose output
						 * By left shift the value by the pin number * 2
						 * because every pin has 2 bits
						*/
						PortGpio_Ptr -> MODER = ( ( (PortGpio_Ptr -> MODER) & (~(MODER_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) ) \
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	6819      	ldr	r1, [r3, #0]
 80006e6:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <Port_Init+0x224>)
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	7afa      	ldrb	r2, [r7, #11]
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4403      	add	r3, r0
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	2203      	movs	r2, #3
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	43db      	mvns	r3, r3
 8000702:	4019      	ands	r1, r3
																	| ( (MODER_REGISTER_GENERAL_PURPOSE_OUT << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS)) ) );
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <Port_Init+0x224>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	7afa      	ldrb	r2, [r7, #11]
 800070a:	4613      	mov	r3, r2
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4403      	add	r3, r0
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	2201      	movs	r2, #1
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	ea41 0203 	orr.w	r2, r1, r3
						PortGpio_Ptr -> MODER = ( ( (PortGpio_Ptr -> MODER) & (~(MODER_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) ) \
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e0a7      	b.n	8000878 <Port_Init+0x2c0>
						 * Set MODER corresponding bits for the Pin = 2
						 * as general purpose output
						 * By left shift the value by the pin number * 2
						 * because every pin has 2 bits
						*/
						PortGpio_Ptr -> MODER = ( ( (PortGpio_Ptr -> MODER) & (~(MODER_REGISTER_MASK_VALUE   << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) ) \
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	6819      	ldr	r1, [r3, #0]
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <Port_Init+0x224>)
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	7afa      	ldrb	r2, [r7, #11]
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4403      	add	r3, r0
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	2203      	movs	r2, #3
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	43db      	mvns	r3, r3
 8000748:	4019      	ands	r1, r3
																	| ( (MODER_REGISTER_ALTERNATIVE_FUNCTION << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) );
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <Port_Init+0x224>)
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	7afa      	ldrb	r2, [r7, #11]
 8000750:	4613      	mov	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4413      	add	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4403      	add	r3, r0
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	2202      	movs	r2, #2
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	ea41 0203 	orr.w	r2, r1, r3
						PortGpio_Ptr -> MODER = ( ( (PortGpio_Ptr -> MODER) & (~(MODER_REGISTER_MASK_VALUE   << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) ) \
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	601a      	str	r2, [r3, #0]
						/*
						 * Check if the number of Pin is <= 7 or not
						 * if so, write its alternative function value
						 * in AFRL register
						*/
						if(Port_Channels[counter].pinNum < AFRL_REGISTER_MAX_PIN_NUM)
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <Port_Init+0x224>)
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	7afa      	ldrb	r2, [r7, #11]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	440b      	add	r3, r1
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b06      	cmp	r3, #6
 8000780:	d83e      	bhi.n	8000800 <Port_Init+0x248>
							 * Set AFRL corresponding bits for the Pin by
							 * its alternative function (mode) value
							 * By left shift the value by the pin number * 4
							 * because every pin has 4 bits
							*/
							PortGpio_Ptr -> AFRL = ( ( (PortGpio_Ptr -> AFRL) & (~(AFR_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * AFR_REGISTER_BIT_NUMBERS) ) ) ) \
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6a19      	ldr	r1, [r3, #32]
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <Port_Init+0x224>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	7afa      	ldrb	r2, [r7, #11]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4403      	add	r3, r0
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	220f      	movs	r2, #15
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	4019      	ands	r1, r3
																		   | ( (Port_Channels[counter].mode << ( (Port_Channels[counter].pinNum) * AFR_REGISTER_BIT_NUMBERS) ) ) );
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <Port_Init+0x224>)
 80007a6:	6818      	ldr	r0, [r3, #0]
 80007a8:	7afa      	ldrb	r2, [r7, #11]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4403      	add	r3, r0
 80007b4:	78db      	ldrb	r3, [r3, #3]
 80007b6:	461c      	mov	r4, r3
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <Port_Init+0x224>)
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	7afa      	ldrb	r2, [r7, #11]
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4403      	add	r3, r0
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	fa04 f303 	lsl.w	r3, r4, r3
 80007d0:	ea41 0203 	orr.w	r2, r1, r3
							PortGpio_Ptr -> AFRL = ( ( (PortGpio_Ptr -> AFRL) & (~(AFR_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * AFR_REGISTER_BIT_NUMBERS) ) ) ) \
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	621a      	str	r2, [r3, #32]
 80007d8:	e04e      	b.n	8000878 <Port_Init+0x2c0>
 80007da:	bf00      	nop
 80007dc:	2000003c 	.word	0x2000003c
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40021400 	.word	0x40021400
 80007f8:	40021800 	.word	0x40021800
 80007fc:	40021c00 	.word	0x40021c00
						/*
						 * Then, check if the number of Pin is <= 15 or not
						 * if so, write its alternative function value
						 * in AFRL register
						*/
						else if(Port_Channels[counter].pinNum < AFRH_REGISTER_MAX_PIN_NUM)
 8000800:	4b95      	ldr	r3, [pc, #596]	; (8000a58 <Port_Init+0x4a0>)
 8000802:	6819      	ldr	r1, [r3, #0]
 8000804:	7afa      	ldrb	r2, [r7, #11]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	440b      	add	r3, r1
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b0e      	cmp	r3, #14
 8000814:	d830      	bhi.n	8000878 <Port_Init+0x2c0>
							 * Set AFRH corresponding bits for the Pin by
							 * its alternative function (mode) value
							 * By left shift the value by the (pin number - 8) * 4
							 * because every pin has 4 bits
							*/
							PortGpio_Ptr -> AFRH = ( ( (PortGpio_Ptr -> AFRH) & (~(AFR_REGISTER_MASK_VALUE  << ( ( (Port_Channels[counter].pinNum) - AFRH_REGISTER_PIN_DIFFERENCE) * AFR_REGISTER_BIT_NUMBERS) ) ) ) \
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800081a:	4b8f      	ldr	r3, [pc, #572]	; (8000a58 <Port_Init+0x4a0>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	7afa      	ldrb	r2, [r7, #11]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4403      	add	r3, r0
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000830:	3b08      	subs	r3, #8
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	220f      	movs	r2, #15
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	4019      	ands	r1, r3
																		   | ( (Port_Channels[counter].mode << ( ( (Port_Channels[counter].pinNum) - AFRH_REGISTER_PIN_DIFFERENCE) * AFR_REGISTER_BIT_NUMBERS) ) ) );
 800083e:	4b86      	ldr	r3, [pc, #536]	; (8000a58 <Port_Init+0x4a0>)
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	7afa      	ldrb	r2, [r7, #11]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4403      	add	r3, r0
 800084e:	78db      	ldrb	r3, [r3, #3]
 8000850:	461c      	mov	r4, r3
 8000852:	4b81      	ldr	r3, [pc, #516]	; (8000a58 <Port_Init+0x4a0>)
 8000854:	6818      	ldr	r0, [r3, #0]
 8000856:	7afa      	ldrb	r2, [r7, #11]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4403      	add	r3, r0
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000868:	3b08      	subs	r3, #8
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	fa04 f303 	lsl.w	r3, r4, r3
 8000870:	ea41 0203 	orr.w	r2, r1, r3
							PortGpio_Ptr -> AFRH = ( ( (PortGpio_Ptr -> AFRH) & (~(AFR_REGISTER_MASK_VALUE  << ( ( (Port_Channels[counter].pinNum) - AFRH_REGISTER_PIN_DIFFERENCE) * AFR_REGISTER_BIT_NUMBERS) ) ) ) \
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	625a      	str	r2, [r3, #36]	; 0x24

					}
				}

				/* Check if Pin Input or Output */
				if(Port_Channels[counter].direction == PORT_PIN_OUT)
 8000878:	4b77      	ldr	r3, [pc, #476]	; (8000a58 <Port_Init+0x4a0>)
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	7afa      	ldrb	r2, [r7, #11]
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	440b      	add	r3, r1
 8000888:	789b      	ldrb	r3, [r3, #2]
 800088a:	2b01      	cmp	r3, #1
 800088c:	f040 808d 	bne.w	80009aa <Port_Init+0x3f2>
					 * First Clear the corresponding bits then
					 * Set OTYPER corresponding bits for the Pin by its
					 * Output type value (Push Pull = 0 or Open Drain = 1)
					 * By left shift the value by the (pin number)
					*/
					PortGpio_Ptr -> OTYPER = ( ( (PortGpio_Ptr -> OTYPER) & (~(OTYPER_REGISTER_MASK_VALUE   << ( (Port_Channels[counter].pinNum) ) ) ) ) \
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	6859      	ldr	r1, [r3, #4]
 8000894:	4b70      	ldr	r3, [pc, #448]	; (8000a58 <Port_Init+0x4a0>)
 8000896:	6818      	ldr	r0, [r3, #0]
 8000898:	7afa      	ldrb	r2, [r7, #11]
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4403      	add	r3, r0
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	4093      	lsls	r3, r2
 80008ac:	43db      	mvns	r3, r3
 80008ae:	4019      	ands	r1, r3
							   	   	   	   	   	   	   	   	   	   	 | ( (Port_Channels[counter].outputType << ( (Port_Channels[counter].pinNum) ) ) ) );
 80008b0:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <Port_Init+0x4a0>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	7afa      	ldrb	r2, [r7, #11]
 80008b6:	4613      	mov	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4403      	add	r3, r0
 80008c0:	7a5b      	ldrb	r3, [r3, #9]
 80008c2:	461c      	mov	r4, r3
 80008c4:	4b64      	ldr	r3, [pc, #400]	; (8000a58 <Port_Init+0x4a0>)
 80008c6:	6818      	ldr	r0, [r3, #0]
 80008c8:	7afa      	ldrb	r2, [r7, #11]
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4403      	add	r3, r0
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	fa04 f303 	lsl.w	r3, r4, r3
 80008da:	ea41 0203 	orr.w	r2, r1, r3
					PortGpio_Ptr -> OTYPER = ( ( (PortGpio_Ptr -> OTYPER) & (~(OTYPER_REGISTER_MASK_VALUE   << ( (Port_Channels[counter].pinNum) ) ) ) ) \
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	605a      	str	r2, [r3, #4]
					 * First Clear the corresponding bits then
					 * Set OSPEEDR corresponding bits for the Pin by its Speed value
					 * By left shift the value by the (pin number) * 2
					 * because every pin has 2 bits
					*/
					PortGpio_Ptr -> OSPEEDR = ( ( (PortGpio_Ptr -> OSPEEDR) & (~(OSPEEDR_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * OSPEEDR_REGISTER_BIT_NUMBERS) ) ) ) \
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6899      	ldr	r1, [r3, #8]
 80008e6:	4b5c      	ldr	r3, [pc, #368]	; (8000a58 <Port_Init+0x4a0>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	7afa      	ldrb	r2, [r7, #11]
 80008ec:	4613      	mov	r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	4413      	add	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4403      	add	r3, r0
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4019      	ands	r1, r3
							   	   	   	   	   	   	   	   	   	   	   	   	| ( (Port_Channels[counter].speed << ( (Port_Channels[counter].pinNum) * OSPEEDR_REGISTER_BIT_NUMBERS) ) ) );
 8000904:	4b54      	ldr	r3, [pc, #336]	; (8000a58 <Port_Init+0x4a0>)
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	7afa      	ldrb	r2, [r7, #11]
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4403      	add	r3, r0
 8000914:	7a1b      	ldrb	r3, [r3, #8]
 8000916:	461c      	mov	r4, r3
 8000918:	4b4f      	ldr	r3, [pc, #316]	; (8000a58 <Port_Init+0x4a0>)
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	7afa      	ldrb	r2, [r7, #11]
 800091e:	4613      	mov	r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	4413      	add	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4403      	add	r3, r0
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa04 f303 	lsl.w	r3, r4, r3
 8000930:	ea41 0203 	orr.w	r2, r1, r3
					PortGpio_Ptr -> OSPEEDR = ( ( (PortGpio_Ptr -> OSPEEDR) & (~(OSPEEDR_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * OSPEEDR_REGISTER_BIT_NUMBERS) ) ) ) \
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	609a      	str	r2, [r3, #8]


					/* Check for Initial Value */
					if(Port_Channels[counter].initialValue == INITIAL_VALUE_HIGH)
 8000938:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <Port_Init+0x4a0>)
 800093a:	6819      	ldr	r1, [r3, #0]
 800093c:	7afa      	ldrb	r2, [r7, #11]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	440b      	add	r3, r1
 8000948:	79db      	ldrb	r3, [r3, #7]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d116      	bne.n	800097c <Port_Init+0x3c4>
					{
						/*
						 * Set the corresponding bit initial value = 1
						 * By setting the corresponding bit in BSSR (Least significant 16 bits)
						*/
						SET_BIT( (PortGpio_Ptr -> BSRRL), Port_Channels[counter].pinNum);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	8b1b      	ldrh	r3, [r3, #24]
 8000952:	b29b      	uxth	r3, r3
 8000954:	b219      	sxth	r1, r3
 8000956:	4b40      	ldr	r3, [pc, #256]	; (8000a58 <Port_Init+0x4a0>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	7afa      	ldrb	r2, [r7, #11]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4403      	add	r3, r0
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	2301      	movs	r3, #1
 800096c:	4093      	lsls	r3, r2
 800096e:	b21b      	sxth	r3, r3
 8000970:	430b      	orrs	r3, r1
 8000972:	b21b      	sxth	r3, r3
 8000974:	b29a      	uxth	r2, r3
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	831a      	strh	r2, [r3, #24]
 800097a:	e060      	b.n	8000a3e <Port_Init+0x486>
					{
						/*
						 * Set the corresponding bit initial value = 0
						 * By setting the corresponding bit in BSSR (Most significant 16 bits)
						*/
						SET_BIT( (PortGpio_Ptr -> BSRRH), Port_Channels[counter].pinNum);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	8b5b      	ldrh	r3, [r3, #26]
 8000980:	b29b      	uxth	r3, r3
 8000982:	b219      	sxth	r1, r3
 8000984:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <Port_Init+0x4a0>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	7afa      	ldrb	r2, [r7, #11]
 800098a:	4613      	mov	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4403      	add	r3, r0
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	2301      	movs	r3, #1
 800099a:	4093      	lsls	r3, r2
 800099c:	b21b      	sxth	r3, r3
 800099e:	430b      	orrs	r3, r1
 80009a0:	b21b      	sxth	r3, r3
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	835a      	strh	r2, [r3, #26]
 80009a8:	e049      	b.n	8000a3e <Port_Init+0x486>

					}


				}
				else if (Port_Channels[counter].direction == PORT_PIN_IN)
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <Port_Init+0x4a0>)
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	7afa      	ldrb	r2, [r7, #11]
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	440b      	add	r3, r1
 80009ba:	789b      	ldrb	r3, [r3, #2]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d13e      	bne.n	8000a3e <Port_Init+0x486>
				{
					/* Input Pin Selected */

					/* Clear the corresponding bit in the MODER register to configure it as input pin */
					PortGpio_Ptr -> MODER = ( ( (PortGpio_Ptr -> MODER) & (~(MODER_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * MODER_REGISTER_BIT_NUMBERS) ) ) ) );
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <Port_Init+0x4a0>)
 80009c6:	6818      	ldr	r0, [r3, #0]
 80009c8:	7afa      	ldrb	r2, [r7, #11]
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4403      	add	r3, r0
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2203      	movs	r2, #3
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	ea01 0203 	and.w	r2, r1, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	601a      	str	r2, [r3, #0]
					 * its internal resistor value
					 * (Off = 0, Pull up = 1, Pull down = 2)
					 * then left shift the value by the (pin number) * 2
					 * because every pin has 2 bits
					*/
					PortGpio_Ptr -> PUPDR = ( ( (PortGpio_Ptr -> PUPDR) & (~(PUDR_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * PUDR_REGISTER_BIT_NUMBERS) ) ) ) \
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	68d9      	ldr	r1, [r3, #12]
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <Port_Init+0x4a0>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	7afa      	ldrb	r2, [r7, #11]
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4403      	add	r3, r0
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	2203      	movs	r2, #3
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	4019      	ands	r1, r3
	   	   	   	   	   	   	   	   	   							 | ( (Port_Channels[counter].resistor << ( (Port_Channels[counter].pinNum) * PUDR_REGISTER_BIT_NUMBERS) ) ) );
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <Port_Init+0x4a0>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	7afa      	ldrb	r2, [r7, #11]
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4403      	add	r3, r0
 8000a1a:	791b      	ldrb	r3, [r3, #4]
 8000a1c:	461c      	mov	r4, r3
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <Port_Init+0x4a0>)
 8000a20:	6818      	ldr	r0, [r3, #0]
 8000a22:	7afa      	ldrb	r2, [r7, #11]
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4403      	add	r3, r0
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa04 f303 	lsl.w	r3, r4, r3
 8000a36:	ea41 0203 	orr.w	r2, r1, r3
					PortGpio_Ptr -> PUPDR = ( ( (PortGpio_Ptr -> PUPDR) & (~(PUDR_REGISTER_MASK_VALUE  << ( (Port_Channels[counter].pinNum) * PUDR_REGISTER_BIT_NUMBERS) ) ) ) \
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60da      	str	r2, [r3, #12]
		for(counter = 0; counter < PORT_CONFIGURED_CHANNLES; counter++)
 8000a3e:	7afb      	ldrb	r3, [r7, #11]
 8000a40:	3301      	adds	r3, #1
 8000a42:	72fb      	strb	r3, [r7, #11]
 8000a44:	7afb      	ldrb	r3, [r7, #11]
 8000a46:	2b26      	cmp	r3, #38	; 0x26
 8000a48:	f67f add0 	bls.w	80005ec <Port_Init+0x34>
		}
		/*
		 * Set the Port_status variable as Initialized
		 * because all the pins are initialized now
		 */
		Port_Status = PORT_INITIALIZED;
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <Port_Init+0x4a4>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
	}

}
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	2000003c 	.word	0x2000003c
 8000a5c:	20000039 	.word	0x20000039

08000a60 <Port_RegInit>:
 * @param	None
 *
 * @return	None
 ****************************************************************/
STATIC void Port_RegInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
/*------------------- Port B Registers Reset Value (init value) ---------------------*/

	GPIOA_BASE_ADDRESS -> MODER   = 0xA8000000; /* Reset value for MODER in Port   A */
 8000a64:	4b8b      	ldr	r3, [pc, #556]	; (8000c94 <Port_RegInit+0x234>)
 8000a66:	f04f 4228 	mov.w	r2, #2818572288	; 0xa8000000
 8000a6a:	601a      	str	r2, [r3, #0]
	GPIOA_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset value for OTYPER in Port  A */
 8000a6c:	4b89      	ldr	r3, [pc, #548]	; (8000c94 <Port_RegInit+0x234>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	605a      	str	r2, [r3, #4]
	GPIOA_BASE_ADDRESS -> OSPEEDR = 0x0C000000; /* Reset value for OSPEEDR in Port A */
 8000a72:	4b88      	ldr	r3, [pc, #544]	; (8000c94 <Port_RegInit+0x234>)
 8000a74:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000a78:	609a      	str	r2, [r3, #8]
	GPIOA_BASE_ADDRESS -> PUPDR	  = 0x64000000; /* Reset value for PUPDR in Port   A */
 8000a7a:	4b86      	ldr	r3, [pc, #536]	; (8000c94 <Port_RegInit+0x234>)
 8000a7c:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8000a80:	60da      	str	r2, [r3, #12]
	GPIOA_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   A */
 8000a82:	4b84      	ldr	r3, [pc, #528]	; (8000c94 <Port_RegInit+0x234>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
	GPIOA_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   A */
 8000a88:	4b82      	ldr	r3, [pc, #520]	; (8000c94 <Port_RegInit+0x234>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
	GPIOA_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   A */
 8000a8e:	4b81      	ldr	r3, [pc, #516]	; (8000c94 <Port_RegInit+0x234>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	831a      	strh	r2, [r3, #24]
	GPIOA_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   A */
 8000a94:	4b7f      	ldr	r3, [pc, #508]	; (8000c94 <Port_RegInit+0x234>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	835a      	strh	r2, [r3, #26]
	GPIOA_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    A */
 8000a9a:	4b7e      	ldr	r3, [pc, #504]	; (8000c94 <Port_RegInit+0x234>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
	GPIOA_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    A */
 8000aa0:	4b7c      	ldr	r3, [pc, #496]	; (8000c94 <Port_RegInit+0x234>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
	GPIOA_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    A */
 8000aa6:	4b7b      	ldr	r3, [pc, #492]	; (8000c94 <Port_RegInit+0x234>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24

/*-----------------------------------------------------------------------------------*/

/*------------------- Port B Registers Reset Value (init value) ---------------------*/

	GPIOB_BASE_ADDRESS -> MODER	  = 0x00000280; /* Reset Value for MODER in Port   B */
 8000aac:	4b7a      	ldr	r3, [pc, #488]	; (8000c98 <Port_RegInit+0x238>)
 8000aae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000ab2:	601a      	str	r2, [r3, #0]
	GPIOB_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset Value for OTYPER in Port  B */
 8000ab4:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <Port_RegInit+0x238>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
	GPIOB_BASE_ADDRESS -> OSPEEDR = 0x00000000; /* Reset value for OSPEEDR in Port B */
 8000aba:	4b77      	ldr	r3, [pc, #476]	; (8000c98 <Port_RegInit+0x238>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
	GPIOB_BASE_ADDRESS -> PUPDR	  = 0x00000100; /* Reset value for PUPDR in Port   B */
 8000ac0:	4b75      	ldr	r3, [pc, #468]	; (8000c98 <Port_RegInit+0x238>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	60da      	str	r2, [r3, #12]
	GPIOB_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   B */
 8000ac8:	4b73      	ldr	r3, [pc, #460]	; (8000c98 <Port_RegInit+0x238>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
	GPIOB_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   B */
 8000ace:	4b72      	ldr	r3, [pc, #456]	; (8000c98 <Port_RegInit+0x238>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
	GPIOB_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   B */
 8000ad4:	4b70      	ldr	r3, [pc, #448]	; (8000c98 <Port_RegInit+0x238>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	831a      	strh	r2, [r3, #24]
	GPIOB_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   B */
 8000ada:	4b6f      	ldr	r3, [pc, #444]	; (8000c98 <Port_RegInit+0x238>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	835a      	strh	r2, [r3, #26]
	GPIOB_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    B */
 8000ae0:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <Port_RegInit+0x238>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
	GPIOB_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    B */
 8000ae6:	4b6c      	ldr	r3, [pc, #432]	; (8000c98 <Port_RegInit+0x238>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
	GPIOB_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    B */
 8000aec:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <Port_RegInit+0x238>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24

/*-----------------------------------------------------------------------------------*/

/*------------------- Port C Registers Reset Value (init value) ---------------------*/

	GPIOC_BASE_ADDRESS -> MODER   = 0x00000000;	/* Reset value for MODER in Port   C */
 8000af2:	4b6a      	ldr	r3, [pc, #424]	; (8000c9c <Port_RegInit+0x23c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
	GPIOC_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset Value for OTYPER in Port  C */
 8000af8:	4b68      	ldr	r3, [pc, #416]	; (8000c9c <Port_RegInit+0x23c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
	GPIOC_BASE_ADDRESS -> OSPEEDR = 0x00000000; /* Reset value for OSPEEDR in Port C */
 8000afe:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <Port_RegInit+0x23c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
	GPIOC_BASE_ADDRESS -> PUPDR	  = 0x00000100; /* Reset value for PUPDR in Port   C */
 8000b04:	4b65      	ldr	r3, [pc, #404]	; (8000c9c <Port_RegInit+0x23c>)
 8000b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b0a:	60da      	str	r2, [r3, #12]
	GPIOC_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   C */
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <Port_RegInit+0x23c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
	GPIOC_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   C */
 8000b12:	4b62      	ldr	r3, [pc, #392]	; (8000c9c <Port_RegInit+0x23c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
	GPIOC_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   C */
 8000b18:	4b60      	ldr	r3, [pc, #384]	; (8000c9c <Port_RegInit+0x23c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	831a      	strh	r2, [r3, #24]
	GPIOC_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   C */
 8000b1e:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <Port_RegInit+0x23c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	835a      	strh	r2, [r3, #26]
	GPIOC_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    C */
 8000b24:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <Port_RegInit+0x23c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
	GPIOC_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    C */
 8000b2a:	4b5c      	ldr	r3, [pc, #368]	; (8000c9c <Port_RegInit+0x23c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	621a      	str	r2, [r3, #32]
	GPIOC_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    C */
 8000b30:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <Port_RegInit+0x23c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24

/*-----------------------------------------------------------------------------------*/

/*------------------- Port D Registers Reset Value (init value) ---------------------*/

	GPIOD_BASE_ADDRESS -> MODER   = 0x00000000;	/* Reset value for MODER in Port   D */
 8000b36:	4b5a      	ldr	r3, [pc, #360]	; (8000ca0 <Port_RegInit+0x240>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
	GPIOD_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset Value for OTYPER in Port  D */
 8000b3c:	4b58      	ldr	r3, [pc, #352]	; (8000ca0 <Port_RegInit+0x240>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
	GPIOD_BASE_ADDRESS -> OSPEEDR = 0x00000000; /* Reset value for OSPEEDR in Port D */
 8000b42:	4b57      	ldr	r3, [pc, #348]	; (8000ca0 <Port_RegInit+0x240>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
	GPIOD_BASE_ADDRESS -> PUPDR	  = 0x00000100; /* Reset value for PUPDR in Port   D */
 8000b48:	4b55      	ldr	r3, [pc, #340]	; (8000ca0 <Port_RegInit+0x240>)
 8000b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4e:	60da      	str	r2, [r3, #12]
	GPIOD_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   D */
 8000b50:	4b53      	ldr	r3, [pc, #332]	; (8000ca0 <Port_RegInit+0x240>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
	GPIOD_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   D */
 8000b56:	4b52      	ldr	r3, [pc, #328]	; (8000ca0 <Port_RegInit+0x240>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
	GPIOD_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   D */
 8000b5c:	4b50      	ldr	r3, [pc, #320]	; (8000ca0 <Port_RegInit+0x240>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	831a      	strh	r2, [r3, #24]
	GPIOD_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   D */
 8000b62:	4b4f      	ldr	r3, [pc, #316]	; (8000ca0 <Port_RegInit+0x240>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	835a      	strh	r2, [r3, #26]
	GPIOD_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    D */
 8000b68:	4b4d      	ldr	r3, [pc, #308]	; (8000ca0 <Port_RegInit+0x240>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
	GPIOD_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    D */
 8000b6e:	4b4c      	ldr	r3, [pc, #304]	; (8000ca0 <Port_RegInit+0x240>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
	GPIOD_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    D */
 8000b74:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <Port_RegInit+0x240>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24

/*----------------------------------------------------------------------------------*/

/*------------------- Port E Registers Reset Value (init value) --------------------*/

	GPIOE_BASE_ADDRESS -> MODER   = 0x00000000;	/* Reset value for MODER in Port   E */
 8000b7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <Port_RegInit+0x244>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
	GPIOE_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset Value for OTYPER in Port  E */
 8000b80:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <Port_RegInit+0x244>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
	GPIOE_BASE_ADDRESS -> OSPEEDR = 0x00000000; /* Reset value for OSPEEDR in Port E */
 8000b86:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <Port_RegInit+0x244>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
	GPIOE_BASE_ADDRESS -> PUPDR	  = 0x00000100; /* Reset value for PUPDR in Port   E */
 8000b8c:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <Port_RegInit+0x244>)
 8000b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b92:	60da      	str	r2, [r3, #12]
	GPIOE_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   E */
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <Port_RegInit+0x244>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
	GPIOE_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   E */
 8000b9a:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <Port_RegInit+0x244>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
	GPIOE_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   E */
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <Port_RegInit+0x244>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	831a      	strh	r2, [r3, #24]
	GPIOE_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   E */
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <Port_RegInit+0x244>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	835a      	strh	r2, [r3, #26]
	GPIOE_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    E */
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <Port_RegInit+0x244>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
	GPIOE_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    E */
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <Port_RegInit+0x244>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
	GPIOE_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    E */
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	; (8000ca4 <Port_RegInit+0x244>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24

/************** PORT F & G are available in STM32F429 not STM32F407 ****************/
#ifdef STM32F429
/*------------------- Port F Registers Reset Value (init value) ---------------------*/

	GPIOF_BASE_ADDRESS -> MODER   = 0x00000000;	/* Reset value for MODER in Port   F */
 8000bbe:	4b3a      	ldr	r3, [pc, #232]	; (8000ca8 <Port_RegInit+0x248>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
	GPIOF_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset Value for OTYPER in Port  F */
 8000bc4:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <Port_RegInit+0x248>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
	GPIOF_BASE_ADDRESS -> OSPEEDR = 0x00000000; /* Reset value for OSPEEDR in Port F */
 8000bca:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <Port_RegInit+0x248>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
	GPIOF_BASE_ADDRESS -> PUPDR	  = 0x00000100; /* Reset value for PUPDR in Port   F */
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <Port_RegInit+0x248>)
 8000bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd6:	60da      	str	r2, [r3, #12]
	GPIOF_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   F */
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <Port_RegInit+0x248>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
	GPIOF_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   F */
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <Port_RegInit+0x248>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
	GPIOF_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   F */
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <Port_RegInit+0x248>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	831a      	strh	r2, [r3, #24]
	GPIOF_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   F */
 8000bea:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <Port_RegInit+0x248>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	835a      	strh	r2, [r3, #26]
	GPIOF_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    F */
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <Port_RegInit+0x248>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
	GPIOF_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    F */
 8000bf6:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <Port_RegInit+0x248>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
	GPIOF_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    F */
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <Port_RegInit+0x248>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
/*-----------------------------------------------------------------------------------*/


/*------------------- Port G Registers Reset Value (init value) ---------------------*/

	GPIOF_BASE_ADDRESS -> MODER   = 0x00000000;	/* Reset value for MODER in Port   F */
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <Port_RegInit+0x248>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
	GPIOF_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset Value for OTYPER in Port  F */
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <Port_RegInit+0x248>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
	GPIOF_BASE_ADDRESS -> OSPEEDR = 0x00000000; /* Reset value for OSPEEDR in Port F */
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <Port_RegInit+0x248>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
	GPIOF_BASE_ADDRESS -> PUPDR	  = 0x00000100; /* Reset value for PUPDR in Port   F */
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <Port_RegInit+0x248>)
 8000c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1a:	60da      	str	r2, [r3, #12]
	GPIOF_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   F */
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <Port_RegInit+0x248>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
	GPIOF_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   F */
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <Port_RegInit+0x248>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
	GPIOF_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   F */
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <Port_RegInit+0x248>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	831a      	strh	r2, [r3, #24]
	GPIOF_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   F */
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <Port_RegInit+0x248>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	835a      	strh	r2, [r3, #26]
	GPIOF_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    F */
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <Port_RegInit+0x248>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
	GPIOF_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    F */
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <Port_RegInit+0x248>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
	GPIOF_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    F */
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <Port_RegInit+0x248>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
#endif
/*************************************************************************************/

/*------------------- Port H Registers Reset Value (init value) ---------------------*/

	GPIOH_BASE_ADDRESS -> MODER   = 0x00000000;	/* Reset value for MODER in Port   H */
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <Port_RegInit+0x24c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
	GPIOH_BASE_ADDRESS -> OTYPER  = 0x00000000; /* Reset Value for OTYPER in Port  H */
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <Port_RegInit+0x24c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
	GPIOH_BASE_ADDRESS -> OSPEEDR = 0x00000000; /* Reset value for OSPEEDR in Port H */
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <Port_RegInit+0x24c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	GPIOH_BASE_ADDRESS -> PUPDR	  = 0x00000100; /* Reset value for PUPDR in Port   H */
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <Port_RegInit+0x24c>)
 8000c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c5e:	60da      	str	r2, [r3, #12]
	GPIOH_BASE_ADDRESS -> IDR	  = 0x00000000; /* Reset value for IDR in Port 	   H */
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <Port_RegInit+0x24c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
	GPIOH_BASE_ADDRESS -> ODR	  = 0x00000000; /* Reset value for ODR in Port 	   H */
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <Port_RegInit+0x24c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
	GPIOH_BASE_ADDRESS -> BSRRL	  = 0x00000000; /* Reset value for BSRRL in Port   H */
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <Port_RegInit+0x24c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	831a      	strh	r2, [r3, #24]
	GPIOH_BASE_ADDRESS -> BSRRH	  = 0x00000000; /* Reset value for BSRRH in Port   H */
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <Port_RegInit+0x24c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	835a      	strh	r2, [r3, #26]
	GPIOH_BASE_ADDRESS -> LCKR	  = 0x00000000; /* Reset value for LCKR in Port    H */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <Port_RegInit+0x24c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
	GPIOH_BASE_ADDRESS -> AFRL 	  = 0x00000000; /* Reset value for AFRL in Port    H */
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <Port_RegInit+0x24c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
	GPIOH_BASE_ADDRESS -> AFRH 	  = 0x00000000; /* Reset value for AFRH in Port    H */
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <Port_RegInit+0x24c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------------------------------------------------------------*/

}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020c00 	.word	0x40020c00
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40021400 	.word	0x40021400
 8000cac:	40021c00 	.word	0x40021c00

08000cb0 <xRCC_regInit>:
 [in]				None
 [out]				None
 [in/out]			None
 [Returns]:			Retrun Status (OK if everything is okay)
**********************************************************************************/
Return_status xRCC_regInit(void){
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

	RCC -> CR 			= 0x00000083;
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cb6:	2283      	movs	r2, #131	; 0x83
 8000cb8:	601a      	str	r2, [r3, #0]
	RCC -> PLLCFGR		= 0x24003010;
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cbc:	4a2a      	ldr	r2, [pc, #168]	; (8000d68 <xRCC_regInit+0xb8>)
 8000cbe:	605a      	str	r2, [r3, #4]
	RCC -> CFGR			= 0x00000000;
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
	RCC -> CIR			= 0x00000000;
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
	RCC -> AHB1RSTR		= 0x00000000;
 8000ccc:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
	RCC -> AHB2RSTR		= 0x00000000;
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
	RCC -> AHB3RSTR		= 0x00000000;
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
	RCC -> APB1RSTR		= 0x00000000;
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <xRCC_regInit+0xb4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
	RCC -> APB2RSTR		= 0x00000000;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <xRCC_regInit+0xb4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
	RCC -> AHB1ENR		= 0x00100000;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cf0:	631a      	str	r2, [r3, #48]	; 0x30
	RCC -> AHB2ENR		= 0x00000000;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
	RCC -> AHB3ENR		= 0x00000000;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <xRCC_regInit+0xb4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
	RCC -> APB1ENR		= 0x00000000;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR		= 0x00000000;
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	645a      	str	r2, [r3, #68]	; 0x44
	RCC -> AHB1LPENR	= 0x7EEF97FF;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <xRCC_regInit+0xbc>)
 8000d0e:	651a      	str	r2, [r3, #80]	; 0x50
	RCC -> AHB2LPENR	= 0x000000F1;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d12:	22f1      	movs	r2, #241	; 0xf1
 8000d14:	655a      	str	r2, [r3, #84]	; 0x54
	RCC -> AHB3LPENR	= 0x00000001;
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	659a      	str	r2, [r3, #88]	; 0x58
	RCC -> APB1LPENR	= 0xF6FEC9FF;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <xRCC_regInit+0xc0>)
 8000d20:	661a      	str	r2, [r3, #96]	; 0x60
	RCC -> APB2LPENR	= 0x04777F33;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d24:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <xRCC_regInit+0xc4>)
 8000d26:	665a      	str	r2, [r3, #100]	; 0x64
	RCC -> BDCR			= 0x00000000;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	671a      	str	r2, [r3, #112]	; 0x70
	RCC -> CSR			= 0x0E000000;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d30:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000d34:	675a      	str	r2, [r3, #116]	; 0x74
	RCC -> SSCGR		= 0x00000000;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	RCC -> PLLI2SCFGR	= 0x24003000;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <xRCC_regInit+0xc8>)
 8000d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	RCC -> PLLSAICFGR	= 0x24003000;
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d48:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <xRCC_regInit+0xc8>)
 8000d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	RCC -> DCKCFGR		= 0x00000000;
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <xRCC_regInit+0xb4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	return OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	24003010 	.word	0x24003010
 8000d6c:	7eef97ff 	.word	0x7eef97ff
 8000d70:	f6fec9ff 	.word	0xf6fec9ff
 8000d74:	04777f33 	.word	0x04777f33
 8000d78:	24003000 	.word	0x24003000

08000d7c <xRCC_init>:

 [in/out]			None

 [Returns]:			Retrun Status (OK if everything is okay)
**********************************************************************************/
Return_status xRCC_init(const RCC_config * config_Ptr){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

	/* At first enable HSI Clock */
	RCC -> CR = ((RCC -> CR & (~(HSI_CLEAR)) ) | (HSI_ENABLE_VALUE << HSI_FIRST_BIT));
 8000d84:	4a94      	ldr	r2, [pc, #592]	; (8000fd8 <xRCC_init+0x25c>)
 8000d86:	4b94      	ldr	r3, [pc, #592]	; (8000fd8 <xRCC_init+0x25c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]

	/* Wait till HSI is Ready */
	while( BIT_IS_CLEAR( (RCC -> CR), HSI_READY_BIT) );
 8000d90:	bf00      	nop
 8000d92:	4b91      	ldr	r3, [pc, #580]	; (8000fd8 <xRCC_init+0x25c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f9      	beq.n	8000d92 <xRCC_init+0x16>

	/* Choose what is oscillator type */
	if(config_Ptr -> OscillatorType == OSCILLATOR_TYPE_HSE){
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d12f      	bne.n	8000e06 <xRCC_init+0x8a>
		/* HSE Chosed as the main oscillator */

		/* clear HSE Enable bit first then Enable it */
		RCC -> CR = ((RCC -> CR & (~(HSE_CLEAR))) | (HSE_ENABLE_VALUE << HSE_FIRST_BIT) );
 8000da6:	4a8c      	ldr	r2, [pc, #560]	; (8000fd8 <xRCC_init+0x25c>)
 8000da8:	4b8b      	ldr	r3, [pc, #556]	; (8000fd8 <xRCC_init+0x25c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f423 0382 	bic.w	r3, r3, #4259840	; 0x410000
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db4:	6013      	str	r3, [r2, #0]

		/* wait till HSE is Ready */
		while( BIT_IS_CLEAR((RCC -> CR), HSE_READY_BIT) );
 8000db6:	bf00      	nop
 8000db8:	4b87      	ldr	r3, [pc, #540]	; (8000fd8 <xRCC_init+0x25c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f9      	beq.n	8000db8 <xRCC_init+0x3c>

		/* Clear SYSCLK Bits then Set SYSCLK with HSE Clock */
		RCC -> CFGR = ( (RCC -> CFGR & (~(SYSCLK_CLEAR_CLOCK_SOURCE))) | (SYSCLK_ENABLE_VALUE << SYSCLK_FIRST_BIT) );
 8000dc4:	4a84      	ldr	r2, [pc, #528]	; (8000fd8 <xRCC_init+0x25c>)
 8000dc6:	4b84      	ldr	r3, [pc, #528]	; (8000fd8 <xRCC_init+0x25c>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	f023 0303 	bic.w	r3, r3, #3
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6093      	str	r3, [r2, #8]

		/* Wait till SYSCLK is Ready */
		while( BIT_IS_CLEAR((RCC -> CFGR) , SYSCLK_READY_BIT) );
 8000dd4:	bf00      	nop
 8000dd6:	4b80      	ldr	r3, [pc, #512]	; (8000fd8 <xRCC_init+0x25c>)
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f9      	beq.n	8000dd6 <xRCC_init+0x5a>

		/*------------------------- Disable all PLLs ------------------------*/

		/* Disable Main PLL */
		RCC -> CR &= (~( PLL_ENABLE_VALUE << PLL_ENABLE_BIT) );
 8000de2:	4a7d      	ldr	r2, [pc, #500]	; (8000fd8 <xRCC_init+0x25c>)
 8000de4:	4b7c      	ldr	r3, [pc, #496]	; (8000fd8 <xRCC_init+0x25c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dec:	6013      	str	r3, [r2, #0]

		/*Disable I2S PLL */
		RCC -> CR &= (~( PLLI2S_ENABLE_VALUE << PLLI2S_ENABLE_BIT ) );
 8000dee:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <xRCC_init+0x25c>)
 8000df0:	4b79      	ldr	r3, [pc, #484]	; (8000fd8 <xRCC_init+0x25c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000df8:	6013      	str	r3, [r2, #0]

		/* PLL SAI only available on STM32F429 */
#ifdef STM32F429
		/* Disable SAI PLL */
		RCC -> CR &= (~( PLLSAI_ENABLE_VALUE << PLLSAI_ENABLE_VALUE) );
 8000dfa:	4a77      	ldr	r2, [pc, #476]	; (8000fd8 <xRCC_init+0x25c>)
 8000dfc:	4b76      	ldr	r3, [pc, #472]	; (8000fd8 <xRCC_init+0x25c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f023 0302 	bic.w	r3, r3, #2
 8000e04:	6013      	str	r3, [r2, #0]

	}
		/*--------------------- Put PLL Configurations ---------------------*/

	/* Check if PLL is needed to be enabled or not */
	if(config_Ptr -> PLL.PLLStateMain == PLL_STATE_MAIN_ON){
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	799b      	ldrb	r3, [r3, #6]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	f040 817c 	bne.w	8001108 <xRCC_init+0x38c>
		 * Max Value = 63 (0x3F)
		 * PLLM = 0 or 1 is wrong
		*/

		/* check if PLLM = 0 or 1 because it is a wrong configuration */
		if( ((config_Ptr->PLL.PLLM) & (PLLM_MASKING)) < 1 ){
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	7a9b      	ldrb	r3, [r3, #10]
 8000e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dc08      	bgt.n	8000e2e <xRCC_init+0xb2>
			/* Put PLLM = 2 */
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLM_MASKING)) ) |  PLLM_DEFAULT_VALUE );
 8000e1c:	4a6e      	ldr	r2, [pc, #440]	; (8000fd8 <xRCC_init+0x25c>)
 8000e1e:	4b6e      	ldr	r3, [pc, #440]	; (8000fd8 <xRCC_init+0x25c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e26:	f043 0302 	orr.w	r3, r3, #2
 8000e2a:	6053      	str	r3, [r2, #4]
 8000e2c:	e00a      	b.n	8000e44 <xRCC_init+0xc8>
		}

		else{
			/* PLLM given is > 1 */
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLM_MASKING)) ) | ( (config_Ptr -> PLL.PLLM) & (PLLM_MASKING)) );
 8000e2e:	496a      	ldr	r1, [pc, #424]	; (8000fd8 <xRCC_init+0x25c>)
 8000e30:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <xRCC_init+0x25c>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7a9b      	ldrb	r3, [r3, #10]
 8000e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
		}

		/* check if PLLN = 0 or 1 because it is a wrong configuration */
		if( ( (config_Ptr -> PLL.PLLN) < PLLN_MIN_VALUE ) ){
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8a5b      	ldrh	r3, [r3, #18]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d109      	bne.n	8000e60 <xRCC_init+0xe4>
			/* Put PLLN = 2 */
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLN_MASKING)) ) |  (PLLN_DEFAULT_VALUE << PLLN_FIRST_BIT) );
 8000e4c:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <xRCC_init+0x25c>)
 8000e4e:	4b62      	ldr	r3, [pc, #392]	; (8000fd8 <xRCC_init+0x25c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5e:	6053      	str	r3, [r2, #4]
		}
		/* Check if PLLM > 432 because it is a wrong configuration */
		if( ( (config_Ptr -> PLL.PLLN) > PLLN_MAX_VALUE )  ) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	8a5b      	ldrh	r3, [r3, #18]
 8000e64:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8000e68:	d90a      	bls.n	8000e80 <xRCC_init+0x104>
			 * PLLN Given is in the proper margins
			 * Clear PLLN then Put it (From Bit 6 till bit 14)
			 * PLLN = 0 or 1 or from 433 till 511 is a wrong configuration
			 * so, max value = 432 (0x1B0)
			*/
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLN_MASKING)) ) |  (PLLN_MAX_VALUE << PLLN_FIRST_BIT) );
 8000e6a:	4a5b      	ldr	r2, [pc, #364]	; (8000fd8 <xRCC_init+0x25c>)
 8000e6c:	4b5a      	ldr	r3, [pc, #360]	; (8000fd8 <xRCC_init+0x25c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e78:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8000e7c:	6053      	str	r3, [r2, #4]
 8000e7e:	e00b      	b.n	8000e98 <xRCC_init+0x11c>
			 * Clear PLLN then Put it (From Bit 6 till bit 14)
			 * PLLN = 0 or 1 or from 433 till 511 is a wrong configuration
			 * so, max value = 432 (0x1B0)
			 * Put PLLN = 432
			*/
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLN_MASKING)) ) |  ( (config_Ptr -> PLL.PLLN) << PLLN_FIRST_BIT) );
 8000e80:	4955      	ldr	r1, [pc, #340]	; (8000fd8 <xRCC_init+0x25c>)
 8000e82:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <xRCC_init+0x25c>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	8a52      	ldrh	r2, [r2, #18]
 8000e92:	0192      	lsls	r2, r2, #6
 8000e94:	4313      	orrs	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
		}

		 /*
		  * Clear PLLP then Put it (Bits 16 and 17)
		 */
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLP_MASKING)) ) |  ( ( (config_Ptr -> PLL.PLLP) ) << PLLP_FIRST_BIT) );
 8000e98:	494f      	ldr	r1, [pc, #316]	; (8000fd8 <xRCC_init+0x25c>)
 8000e9a:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <xRCC_init+0x25c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	7ad2      	ldrb	r2, [r2, #11]
 8000ea6:	0412      	lsls	r2, r2, #16
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	604b      	str	r3, [r1, #4]

		/* check if PLLQ = 0 or 1 because it is a wrong configuration */
		if( ( (config_Ptr -> PLL.PLLQ) < 1 ) ){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7b1b      	ldrb	r3, [r3, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d108      	bne.n	8000ec6 <xRCC_init+0x14a>
			/*
			 * Clear PLLQ then Put it (From bit 24 till 27)
			 * Put PLLQ = 2
			*/
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLQ_MASKING)) ) |  (PLLQ_DEFAULT_VALUE << PLLQ_FIRST_BIT) );
 8000eb4:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <xRCC_init+0x25c>)
 8000eb6:	4b48      	ldr	r3, [pc, #288]	; (8000fd8 <xRCC_init+0x25c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec2:	6053      	str	r3, [r2, #4]
 8000ec4:	e00b      	b.n	8000ede <xRCC_init+0x162>
		else{
			/*
			 * PLLQ Given is in the proper margins
			 * Clear PLLQ then Put it (From Bit 24 till bit 27)
			*/
			RCC -> PLLCFGR = ( ((RCC -> PLLCFGR) & (~(PLLQ_MASKING)) ) |  ( ( (config_Ptr -> PLL.PLLQ) << PLLQ_FIRST_BIT) & (PLLQ_MASKING) ) );
 8000ec6:	4944      	ldr	r1, [pc, #272]	; (8000fd8 <xRCC_init+0x25c>)
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <xRCC_init+0x25c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7b1b      	ldrb	r3, [r3, #12]
 8000ed4:	061b      	lsls	r3, r3, #24
 8000ed6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]

		}

		/* Choose Main PLL & PLL I2S entry clock source */
		if( (config_Ptr -> OscillatorType == OSCILLATOR_TYPE_HSE) && ( (config_Ptr -> PLL.PLLSource) == PLL_SOURCE_HSE)  )
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d10a      	bne.n	8000efc <xRCC_init+0x180>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7a5b      	ldrb	r3, [r3, #9]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d106      	bne.n	8000efc <xRCC_init+0x180>
		{
			/* clear choosing bit then choose HSE as main PLL & I2S PLL entry clock */
			RCC -> PLLCFGR = ( ( (RCC -> PLLCFGR) & (~(PLL_SOURCE_HSE << PLL_SOURCE_BIT) ) ) | (PLL_SOURCE_HSE << PLL_SOURCE_BIT) );
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <xRCC_init+0x25c>)
 8000ef0:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <xRCC_init+0x25c>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef8:	6053      	str	r3, [r2, #4]
 8000efa:	e005      	b.n	8000f08 <xRCC_init+0x18c>
		}
		else
		{
			/* clear choosing bit which means choose HSI as main PLL & I2S PLL entry clock */
			RCC -> PLLCFGR = (  (RCC -> PLLCFGR) & (~(PLL_SOURCE_HSE << PLL_SOURCE_BIT) ) );
 8000efc:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <xRCC_init+0x25c>)
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <xRCC_init+0x25c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f06:	6053      	str	r3, [r2, #4]
		}

		/* Clear enabling bit of PLL then Enable the Main PLL Engine */
		RCC -> CR = ( ( (RCC -> CR) & (~(PLL_STATE_MAIN_ON << PLL_ENABLE_BIT) ) ) | (PLL_STATE_MAIN_ON << PLL_ENABLE_BIT) );
 8000f08:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <xRCC_init+0x25c>)
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <xRCC_init+0x25c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f12:	6013      	str	r3, [r2, #0]

		/* Wait till PLL is Ready */
		while( BIT_IS_CLEAR( (RCC -> CR), PLL_READY_BIT) );
 8000f14:	bf00      	nop
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <xRCC_init+0x25c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0f9      	beq.n	8000f16 <xRCC_init+0x19a>

		/* Check if PLL I2S is needed or not */
		if(config_Ptr -> PLL.PLLStateI2S == PLL_STATE_I2S_ON){
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	79db      	ldrb	r3, [r3, #7]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d173      	bne.n	8001012 <xRCC_init+0x296>
			 * I2S is needed to be Enabled
			 * PLLM Previosly edited in the main PLL
			*/

			/* check if PLLI2SN = 0 or 1 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLI2SN) < 1 ) ){
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	8a9b      	ldrh	r3, [r3, #20]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10b      	bne.n	8000f4a <xRCC_init+0x1ce>
				/* Put PLLNI2SN = 2 */
				RCC -> PLLI2SCFGR = ( ((RCC -> PLLI2SCFGR) & (~(PLLN_MASKING)) ) |  (PLLN_DEFAULT_VALUE << PLLN_FIRST_BIT) );
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <xRCC_init+0x25c>)
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <xRCC_init+0x25c>)
 8000f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			}
			/* Check if PLLM > 432 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLI2SN) > PLLN_MAX_VALUE )  ) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	8a9b      	ldrh	r3, [r3, #20]
 8000f4e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8000f52:	d90c      	bls.n	8000f6e <xRCC_init+0x1f2>

				/*
				 * Clear PLLI2SN then Put it with max value (432) (From Bit 6 till bit 14)
				*/
				RCC -> PLLI2SCFGR = ( ((RCC -> PLLI2SCFGR) & (~(PLLN_MASKING)) ) |  (PLLN_MAX_VALUE << PLLN_FIRST_BIT) );
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <xRCC_init+0x25c>)
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <xRCC_init+0x25c>)
 8000f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f64:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8000f68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000f6c:	e00d      	b.n	8000f8a <xRCC_init+0x20e>
				 * Clear PLLI2SN then Put it (From Bit 6 till bit 14)
				 * PLLN = 0 or 1 or from 433 till 511 is a wrong configuration
				 * so, max value = 432 (0x1B0)
				 * Put PLLN = 432
				*/
				RCC -> PLLI2SCFGR = ( ((RCC -> PLLI2SCFGR) & (~(PLLN_MASKING)) ) |  ( (config_Ptr -> PLL.PLLI2SN) << PLLN_FIRST_BIT) );
 8000f6e:	491a      	ldr	r1, [pc, #104]	; (8000fd8 <xRCC_init+0x25c>)
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <xRCC_init+0x25c>)
 8000f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	8a92      	ldrh	r2, [r2, #20]
 8000f82:	0192      	lsls	r2, r2, #6
 8000f84:	4313      	orrs	r3, r2
 8000f86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
			}

			/* PLL SAI is only available on STM32F429 */
#ifdef STM32F429
			/* check if PLLI2SQ = 0 or 1 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLI2SQ) < 1 ) ){
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7b9b      	ldrb	r3, [r3, #14]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10a      	bne.n	8000fa8 <xRCC_init+0x22c>
				/*
				 * Clear PLLI2SQ then Put it (From bit 24 till 27)
				 * Put PLLI2SQ = 2
				*/
				RCC -> PLLI2SCFGR = ( ((RCC -> PLLI2SCFGR) & (~(PLLI2SQ_MASKING)) ) |  (PLLI2SQ_DEFAULT_VALUE << PLLI2SQ_FIRST_BIT) );
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <xRCC_init+0x25c>)
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <xRCC_init+0x25c>)
 8000f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f9a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000fa6:	e007      	b.n	8000fb8 <xRCC_init+0x23c>
			else{
				/*
				 * PLLI2SQ Given is in the proper margins
				 * Clear PLLI2SQ then Put it (From Bit 24 till bit 27)
				*/
				RCC -> PLLI2SCFGR = ( ((RCC -> PLLI2SCFGR) & (~(PLLI2SQ_MASKING)) ) |  ( ( (config_Ptr -> PLL.PLLI2SQ) << PLLI2SQ_FIRST_BIT) & (PLLI2SQ_DEFAULT_VALUE) ) );
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <xRCC_init+0x25c>)
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <xRCC_init+0x25c>)
 8000fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fb0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000fb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

			}
#endif
			/* check if PLLI2SR = 0 or 1 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLI2SR) < 1 ) ){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7b5b      	ldrb	r3, [r3, #13]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10d      	bne.n	8000fdc <xRCC_init+0x260>
				/*
				 * Clear PLLI2SR then Put it (From bit 28 till 30)
				 * Put PLLI2SR = 2
				*/
				RCC -> PLLI2SCFGR = ( ((RCC -> PLLI2SCFGR) & (~(PLLI2SR_MASIKNG)) ) |  (PLLI2SR_DEFAULT_VALUE << PLLI2SR_FIRST_BIT) );
 8000fc0:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <xRCC_init+0x25c>)
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <xRCC_init+0x25c>)
 8000fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fc8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8000fcc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000fd4:	e010      	b.n	8000ff8 <xRCC_init+0x27c>
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
			else{
				/*
				 * PLLI2SR Given is in the proper margins
				 * Clear PLLI2SR then Put it (From Bit 28 till bit 30)
				*/
				RCC -> PLLI2SCFGR = ( ((RCC -> PLLI2SCFGR) & (~(PLLI2SR_MASIKNG)) ) |  ( ( (config_Ptr -> PLL.PLLI2SR) << PLLI2SR_FIRST_BIT) & (PLLI2SR_MASIKNG) ) );
 8000fdc:	4968      	ldr	r1, [pc, #416]	; (8001180 <xRCC_init+0x404>)
 8000fde:	4b68      	ldr	r3, [pc, #416]	; (8001180 <xRCC_init+0x404>)
 8000fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fe4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7b5b      	ldrb	r3, [r3, #13]
 8000fec:	071b      	lsls	r3, r3, #28
 8000fee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
			*/

			/* Enable I2S PLL Engine */

			/* Clear enabling bit of PLL then Enable the I2S PLL Engine */
			RCC -> CR = ( ( (RCC -> CR) & (~(PLLI2S_ENABLE_VALUE << PLLI2S_ENABLE_BIT) ) ) | (PLLI2S_ENABLE_VALUE << PLLI2S_ENABLE_BIT) );
 8000ff8:	4a61      	ldr	r2, [pc, #388]	; (8001180 <xRCC_init+0x404>)
 8000ffa:	4b61      	ldr	r3, [pc, #388]	; (8001180 <xRCC_init+0x404>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001002:	6013      	str	r3, [r2, #0]

			/* Wait till PLL is Ready */
			while( BIT_IS_CLEAR( (RCC -> CR), PLLI2S_READY_BIT) );
 8001004:	bf00      	nop
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <xRCC_init+0x404>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f9      	beq.n	8001006 <xRCC_init+0x28a>
		}

		/* PLL SAI is only available on STM32F429 */
#ifdef STM32F429
		/* Check if PLL SAI is needed or not */
		if(config_Ptr -> PLL.PLLStateSAI == PLL_STATE_SAI_ON){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7a1b      	ldrb	r3, [r3, #8]
 8001016:	2b05      	cmp	r3, #5
 8001018:	d176      	bne.n	8001108 <xRCC_init+0x38c>
			 * SAI is needed to be Enabled
			 * PLLM Previosly edited in the main PLL
			*/

			/* check if PLLSAIN = 0 or 1 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLSAIN) < 1 ) ){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	8adb      	ldrh	r3, [r3, #22]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10b      	bne.n	800103a <xRCC_init+0x2be>
				/* Put PLLNI2SN = 2 */
				RCC -> PLLSAICFGR = ( ((RCC -> PLLSAICFGR) & (~(PLLN_MASKING)) ) |  (PLLN_DEFAULT_VALUE << PLLN_FIRST_BIT) );
 8001022:	4a57      	ldr	r2, [pc, #348]	; (8001180 <xRCC_init+0x404>)
 8001024:	4b56      	ldr	r3, [pc, #344]	; (8001180 <xRCC_init+0x404>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800102e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001036:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
			}
			/* Check if PLLM > 432 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLSAIN) > PLLN_MAX_VALUE )  ) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	8adb      	ldrh	r3, [r3, #22]
 800103e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001042:	d90c      	bls.n	800105e <xRCC_init+0x2e2>

				/*
				 * Clear PLLSAIN then Put it with max value (432) (From Bit 6 till bit 14)
				*/
				RCC -> PLLSAICFGR = ( ((RCC -> PLLSAICFGR) & (~(PLLN_MASKING)) ) |  (PLLN_MAX_VALUE << PLLN_FIRST_BIT) );
 8001044:	4a4e      	ldr	r2, [pc, #312]	; (8001180 <xRCC_init+0x404>)
 8001046:	4b4e      	ldr	r3, [pc, #312]	; (8001180 <xRCC_init+0x404>)
 8001048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001054:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800105c:	e00d      	b.n	800107a <xRCC_init+0x2fe>
				 * Clear PLLSAIN then Put it (From Bit 6 till bit 14)
				 * PLLN = 0 or 1 or from 433 till 511 is a wrong configuration
				 * so, max value = 432 (0x1B0)
				 * Put PLLN = 432
				*/
				RCC -> PLLSAICFGR = ( ((RCC -> PLLSAICFGR) & (~(PLLN_MASKING)) ) |  ( (config_Ptr -> PLL.PLLSAIN) << PLLN_FIRST_BIT) );
 800105e:	4948      	ldr	r1, [pc, #288]	; (8001180 <xRCC_init+0x404>)
 8001060:	4b47      	ldr	r3, [pc, #284]	; (8001180 <xRCC_init+0x404>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800106a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	8ad2      	ldrh	r2, [r2, #22]
 8001072:	0192      	lsls	r2, r2, #6
 8001074:	4313      	orrs	r3, r2
 8001076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
			}

			/* check if PLLSAIQ = 0 or 1 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLSAIQ) < 1 ) ){
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7bdb      	ldrb	r3, [r3, #15]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10a      	bne.n	8001098 <xRCC_init+0x31c>
				/*
				 * Clear PLLSAIQ then Put it (From bit 24 till 27)
				 * Put PLLSAIQ = 2
				*/
				RCC -> PLLSAICFGR = ( ((RCC -> PLLSAICFGR) & (~(PLLSAIQ_MASKING)) ) |  (PLLSAIQ_DEFAULT_VALUE << PLLSAIQ_FIRST_BIT) );
 8001082:	4a3f      	ldr	r2, [pc, #252]	; (8001180 <xRCC_init+0x404>)
 8001084:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <xRCC_init+0x404>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800108e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001092:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001096:	e00d      	b.n	80010b4 <xRCC_init+0x338>
			else{
				/*
				 * PLLSAIQ Given is in the proper margins
				 * Clear PLLSAIQ then Put it (From Bit 24 till bit 27)
				*/
				RCC -> PLLSAICFGR = ( ((RCC -> PLLSAICFGR) & (~(PLLSAIQ_MASKING)) ) |  ( ( (config_Ptr -> PLL.PLLSAIQ) << PLLSAIQ_FIRST_BIT) & (PLLSAIQ_MASKING) ) );
 8001098:	4939      	ldr	r1, [pc, #228]	; (8001180 <xRCC_init+0x404>)
 800109a:	4b39      	ldr	r3, [pc, #228]	; (8001180 <xRCC_init+0x404>)
 800109c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a0:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7bdb      	ldrb	r3, [r3, #15]
 80010a8:	061b      	lsls	r3, r3, #24
 80010aa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

			}

			/* check if PLLSAIR = 0 or 1 because it is a wrong configuration */
			if( ( (config_Ptr -> PLL.PLLSAIR) < 1 ) ){
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7c1b      	ldrb	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10a      	bne.n	80010d2 <xRCC_init+0x356>
				/*
				 * Clear PLLSAIR then Put it (From bit 28 till 30)
				 * Put PLLSAIR = 2
				*/
				RCC -> PLLSAICFGR = ( ((RCC -> PLLSAICFGR) & (~(PLLSAIR_MASKING)) ) |  (PLLSAIR_DEFAULT_VALUE << PLLSAIR_FIRST_BIT) );
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <xRCC_init+0x404>)
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <xRCC_init+0x404>)
 80010c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80010c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80010d0:	e00d      	b.n	80010ee <xRCC_init+0x372>
			else{
				/*
				 * PLLSAIR Given is in the proper margins
				 * Clear PLLSAIR then Put it (From Bit 28 till bit 30)
				*/
				RCC -> PLLSAICFGR = ( ((RCC -> PLLSAICFGR) & (~(PLLSAIR_MASKING)) ) |  ( ( (config_Ptr -> PLL.PLLSAIR) << PLLSAIR_FIRST_BIT) & (PLLSAIR_MASKING) ) );
 80010d2:	492b      	ldr	r1, [pc, #172]	; (8001180 <xRCC_init+0x404>)
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <xRCC_init+0x404>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7c1b      	ldrb	r3, [r3, #16]
 80010e2:	071b      	lsls	r3, r3, #28
 80010e4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80010e8:	4313      	orrs	r3, r2
 80010ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
			 * Clock entry source for SAI PLL Previously chosen when
			 * enabling the Main PLL Engine
			*/

			/* Clear enabling bit of SAI PLL then Enable the Main PLL Engine */
			RCC -> CR = ( ( (RCC -> CR) & (~(PLLSAI_ENABLE_VALUE << PLLSAI_ENABLE_BIT) ) ) | (PLLSAI_ENABLE_VALUE << PLLSAI_ENABLE_BIT) );
 80010ee:	4a24      	ldr	r2, [pc, #144]	; (8001180 <xRCC_init+0x404>)
 80010f0:	4b23      	ldr	r3, [pc, #140]	; (8001180 <xRCC_init+0x404>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6013      	str	r3, [r2, #0]

			/* Wait till SAI PLL is Ready */
			while( BIT_IS_CLEAR( (RCC -> CR), PLLSAI_READY_BIT) );
 80010fa:	bf00      	nop
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <xRCC_init+0x404>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f9      	beq.n	80010fc <xRCC_init+0x380>
	 * PLL is Disabled
	 * HSI is the main clock now
	*/

	/* Clear SYSCLK Bits then choose SYSCLK clock source */
	RCC -> CFGR = ( ( (RCC -> CFGR) & (~(SYSCLK_CLEAR_CLOCK_SOURCE)) ) | ( (config_Ptr -> SYSCLKSource) & SYSCLK_CLEAR_CLOCK_SOURCE));
 8001108:	491d      	ldr	r1, [pc, #116]	; (8001180 <xRCC_init+0x404>)
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <xRCC_init+0x404>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f023 0203 	bic.w	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	4313      	orrs	r3, r2
 800111c:	608b      	str	r3, [r1, #8]

	/* Wait till SYSCLK is ready */
	while( BIT_IS_CLEAR( (RCC -> CFGR) , (1 + (config_Ptr -> SYSCLKSource) ) ) );
 800111e:	bf00      	nop
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <xRCC_init+0x404>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	7852      	ldrb	r2, [r2, #1]
 8001128:	3201      	adds	r2, #1
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0f4      	beq.n	8001120 <xRCC_init+0x3a4>

	/* Clear HCLK Divisor Bits ( AHB Prescaler bits ) then Set it */
	RCC -> CFGR = ( ( (RCC -> CFGR) & (~(HCLK_CLEAR)) ) | ( ( (config_Ptr -> AHBDivisor) << HCLK_FIRST_BIT) & HCLK_ENSURE_DATA) );
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <xRCC_init+0x404>)
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <xRCC_init+0x404>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001140:	6093      	str	r3, [r2, #8]

	/* Clear PCLK1 Divisor Bits ( APB1 Prescaler bits ) then Set it */
	RCC -> CFGR = ( ( (RCC -> CFGR) & (~(PCLK1_CLEAR)) ) | ( ( (config_Ptr -> APB1Divisor) << PCLK1_FIRST_BIT) & PCLK1_CLEAR) );
 8001142:	490f      	ldr	r1, [pc, #60]	; (8001180 <xRCC_init+0x404>)
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <xRCC_init+0x404>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	78db      	ldrb	r3, [r3, #3]
 8001150:	029b      	lsls	r3, r3, #10
 8001152:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001156:	4313      	orrs	r3, r2
 8001158:	608b      	str	r3, [r1, #8]

	/* Clear PCLK2 Divisor Bits ( APB2 Prescaler bits ) then Set it */
	RCC -> CFGR = ( ( (RCC -> CFGR) & (~(PCLK2_CLEAR)) ) | ( ( (config_Ptr -> APB2Divisor) << PCLK2_FIRST_BIT) & PCLK2_CLEAR) );
 800115a:	4909      	ldr	r1, [pc, #36]	; (8001180 <xRCC_init+0x404>)
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <xRCC_init+0x404>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	791b      	ldrb	r3, [r3, #4]
 8001168:	035b      	lsls	r3, r3, #13
 800116a:	b29b      	uxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	608b      	str	r3, [r1, #8]

	return OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <xRCC_getClocks>:
 [in/out]			None

 [Returns]:			Retrun Status (OK if everything is okay)
**********************************************************************************/

Return_status xRCC_getClocks(RCC_clockValues * rcc_Clocks){
 8001184:	b480      	push	{r7}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

	u32 temp = 0, fvco = 0, prescaler = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
	u32 pllSource = 0, pllp = 0, pllm = 0, plln = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]

	/* Get SYSCLK Clock Source from its status bits */
	temp = ( (RCC -> CFGR) & 0xC );
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <xRCC_getClocks+0x14c>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	623b      	str	r3, [r7, #32]

	/* Decide What is SYSCLK Value with switch */
	switch(temp){
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d007      	beq.n	80011c8 <xRCC_getClocks+0x44>
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d009      	beq.n	80011d0 <xRCC_getClocks+0x4c>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d13b      	bne.n	8001238 <xRCC_getClocks+0xb4>
		case 0x00:
			/* if SYSCLK Stats is 0, so it is equal to HSI */
			rcc_Clocks -> SYSCLKFrequency = HSI_CLOCK_VALUE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a44      	ldr	r2, [pc, #272]	; (80012d4 <xRCC_getClocks+0x150>)
 80011c4:	601a      	str	r2, [r3, #0]
		break;
 80011c6:	e03b      	b.n	8001240 <xRCC_getClocks+0xbc>

		case 0x04:
			/* if SYSCLK Stats is 1, so it is equal to HSE */
			rcc_Clocks -> SYSCLKFrequency = HSE_CLOCK_VALUE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a43      	ldr	r2, [pc, #268]	; (80012d8 <xRCC_getClocks+0x154>)
 80011cc:	601a      	str	r2, [r3, #0]
		break;
 80011ce:	e037      	b.n	8001240 <xRCC_getClocks+0xbc>
			 *		F(Main PLL) 	  = F(VCO) / PLLP
			 *		F(USB, SDIO, RNG) = F(VCO) / PLLQ
		    */

			/* First, Getting PLL Source */
			pllSource = ( ( (RCC -> PLLCFGR) & ( (PLL_ENABLE_VALUE << PLL_SOURCE_BIT) ) ) >> PLL_SOURCE_BIT);
 80011d0:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <xRCC_getClocks+0x14c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	0d9b      	lsrs	r3, r3, #22
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	61bb      	str	r3, [r7, #24]

			/* Second, Getting PLLN */
			plln = ( ( (RCC -> PLLCFGR) & ( (PLLN_MASKING) ) ) >> PLLN_FIRST_BIT);
 80011dc:	4b3c      	ldr	r3, [pc, #240]	; (80012d0 <xRCC_getClocks+0x14c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	099b      	lsrs	r3, r3, #6
 80011e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011e6:	60fb      	str	r3, [r7, #12]

			/* Third, Getting PLLM */
		    pllm = ( ( (RCC -> PLLCFGR) & ( (PLLM_MASKING) ) ) );
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <xRCC_getClocks+0x14c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f0:	613b      	str	r3, [r7, #16]

		    /* Check if pll source != 0 which is HSE */
		    if(pllSource != 0){
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d008      	beq.n	800120a <xRCC_getClocks+0x86>

		    	/* Fourth, getting Fvco, clock input is HSE */
		    	fvco = ( ( HSE_CLOCK_VALUE / pllm) * (plln) );
 80011f8:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <xRCC_getClocks+0x154>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
 8001208:	e007      	b.n	800121a <xRCC_getClocks+0x96>
		    }
		    /* Pll source is HSI  */
		    else{

		       	/* Fourth, getting Fvco, clock input is HSE */
		    	fvco = ( ( HSI_CLOCK_VALUE / pllm) * (plln) );
 800120a:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <xRCC_getClocks+0x150>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
		    /*
		     * Fifth, getting PLLP
		     * +1 because first value might be 00 which is 2
		     * *2 because every value multiplied by 2
		    */
		    pllp = ( ( (RCC -> PLLCFGR & PLLP_MASKING) >> PLLP_FIRST_BIT ) + 1 ) *2 ;
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <xRCC_getClocks+0x14c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	0c1b      	lsrs	r3, r3, #16
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	3301      	adds	r3, #1
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	617b      	str	r3, [r7, #20]

		    /* set SYSCLKFreunecy to struct */
		    rcc_Clocks -> SYSCLKFrequency = fvco / pllp;
 800122a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	601a      	str	r2, [r3, #0]
		    break;
 8001236:	e003      	b.n	8001240 <xRCC_getClocks+0xbc>

		default:
			rcc_Clocks -> SYSCLKFrequency = HSI_CLOCK_VALUE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a26      	ldr	r2, [pc, #152]	; (80012d4 <xRCC_getClocks+0x150>)
 800123c:	601a      	str	r2, [r3, #0]
			break;
 800123e:	bf00      	nop
	}
		temp = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
		/*
		 * Getting HCLK prescaler by anding CFGR Value
		 * with HCLK prescaler Bits
		 * then right shift the value with 4 to get the actual value of bits
		*/
		temp = ( ( (RCC -> CFGR) & HCLK_CLEAR) >> 4);
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <xRCC_getClocks+0x14c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	623b      	str	r3, [r7, #32]

		/* Get prescaler value */
		prescaler = g_busesPreScaler[temp];
 8001250:	4a22      	ldr	r2, [pc, #136]	; (80012dc <xRCC_getClocks+0x158>)
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	61fb      	str	r3, [r7, #28]

		/*
		 * Get HCLK Clock Frequency by dividing the SYSCLK Frequency
		 *  with AHB Prescaler (Right Shifting it)
		 */
		rcc_Clocks -> HCLKFrequency = ( (rcc_Clocks -> SYSCLKFrequency) >> prescaler );
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	40da      	lsrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	605a      	str	r2, [r3, #4]

		/* Clearing buffers */
		temp = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
		prescaler = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
		/*
		 * Getting PCLK1 prescaler by anding CFGR Value
		 * with PCLK1 prescaler Bits
		 * then right shift the value with 10 to get the actual value of bits
		*/
		temp = ( ( (RCC -> CFGR) & PCLK1_CLEAR) >> 10);
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <xRCC_getClocks+0x14c>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	0a9b      	lsrs	r3, r3, #10
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	623b      	str	r3, [r7, #32]

		/* Get prescaler value */
		prescaler = g_busesPreScaler[temp];
 800127c:	4a17      	ldr	r2, [pc, #92]	; (80012dc <xRCC_getClocks+0x158>)
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	61fb      	str	r3, [r7, #28]

		/*
		 * Get PCLK1 Clock Frequency by dividing the HCLK Frequency
		 *  with APB1 Prescaler (Right Shifting it)
		 */
		rcc_Clocks -> PCLK1Frequency = ( (rcc_Clocks -> HCLKFrequency) >> prescaler );
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	40da      	lsrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]

		/* Clearing buffers */
		temp = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	623b      	str	r3, [r7, #32]
		prescaler = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
		/*
		 * Getting PCLK1 prescaler by anding CFGR Value
		 * with PCLK1 prescaler Bits
		 * then right shift the value with 13 to get the actual value of bits
		*/
		temp = ( ( (RCC -> CFGR) & PCLK2_CLEAR) >> 13);
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <xRCC_getClocks+0x14c>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	0b5b      	lsrs	r3, r3, #13
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	623b      	str	r3, [r7, #32]

		/* Get prescaler value */
		prescaler = g_busesPreScaler[temp];
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <xRCC_getClocks+0x158>)
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	61fb      	str	r3, [r7, #28]

		/*
		 * Get PCLK1 Clock Frequency by dividing the HCLK Frequency
		 *  with APB1 Prescaler (Right Shifting it)
		 */
		rcc_Clocks -> PCLK2Frequency = ( (rcc_Clocks -> HCLKFrequency) >> prescaler );
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	40da      	lsrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]

		return OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	372c      	adds	r7, #44	; 0x2c
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	00f42400 	.word	0x00f42400
 80012d8:	007a1200 	.word	0x007a1200
 80012dc:	20000004 	.word	0x20000004

080012e0 <xRCC_EnableClock>:
 [in/out]			None

 [Returns]:			Retrun Status (OK if everything is okay)
**********************************************************************************/
Return_status xRCC_EnableClock(u8 u8Peripheral)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	/* Check if peripheral number is within AHB1 Margins */
	if ((u8Peripheral >= AHB1_FIRST_NUMBER) && (u8Peripheral < AHB1_LAST_NUMBER))
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	d809      	bhi.n	8001304 <xRCC_EnableClock+0x24>
	{
		/* Enable Clock */
		SET_BIT(RCC -> AHB1ENR, u8Peripheral);
 80012f0:	4930      	ldr	r1, [pc, #192]	; (80013b4 <xRCC_EnableClock+0xd4>)
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <xRCC_EnableClock+0xd4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	79fa      	ldrb	r2, [r7, #7]
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	4313      	orrs	r3, r2
 8001300:	630b      	str	r3, [r1, #48]	; 0x30
 8001302:	e04f      	b.n	80013a4 <xRCC_EnableClock+0xc4>
	}

	/* Check if peripheral number is within AHB2 Margins */
	else if ((u8Peripheral >= AHB2_FIRST_NUMBER) && (u8Peripheral < AHB2_LAST_NUMBER))
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b1f      	cmp	r3, #31
 8001308:	d90f      	bls.n	800132a <xRCC_EnableClock+0x4a>
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b3f      	cmp	r3, #63	; 0x3f
 800130e:	d80c      	bhi.n	800132a <xRCC_EnableClock+0x4a>
	{
		/* Minus 32 of the value to operate with the register bits */
		u8Peripheral -=32;
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	3b20      	subs	r3, #32
 8001314:	71fb      	strb	r3, [r7, #7]

		/* Enable Clock */
		SET_BIT(RCC -> AHB2ENR, u8Peripheral);
 8001316:	4927      	ldr	r1, [pc, #156]	; (80013b4 <xRCC_EnableClock+0xd4>)
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <xRCC_EnableClock+0xd4>)
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	2001      	movs	r0, #1
 8001320:	fa00 f202 	lsl.w	r2, r0, r2
 8001324:	4313      	orrs	r3, r2
 8001326:	634b      	str	r3, [r1, #52]	; 0x34
 8001328:	e03c      	b.n	80013a4 <xRCC_EnableClock+0xc4>
	}

	/* Check if peripheral number is within AHB3 Margins */
	else if ((u8Peripheral >= AHB3_FIRST_NUMBER) && (u8Peripheral < AHB3_LAST_NUMBER))
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b3f      	cmp	r3, #63	; 0x3f
 800132e:	d910      	bls.n	8001352 <xRCC_EnableClock+0x72>
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0c      	blt.n	8001352 <xRCC_EnableClock+0x72>
	{
		/* Minus 64 of the value to operate with the register bits */
		u8Peripheral -=64;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	3b40      	subs	r3, #64	; 0x40
 800133c:	71fb      	strb	r3, [r7, #7]

		/* Enable Clock */
		SET_BIT(RCC -> AHB3ENR, u8Peripheral);
 800133e:	491d      	ldr	r1, [pc, #116]	; (80013b4 <xRCC_EnableClock+0xd4>)
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <xRCC_EnableClock+0xd4>)
 8001342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001344:	79fa      	ldrb	r2, [r7, #7]
 8001346:	2001      	movs	r0, #1
 8001348:	fa00 f202 	lsl.w	r2, r0, r2
 800134c:	4313      	orrs	r3, r2
 800134e:	638b      	str	r3, [r1, #56]	; 0x38
 8001350:	e028      	b.n	80013a4 <xRCC_EnableClock+0xc4>

	}

	/* Check if peripheral number is within APB1 Margins */
	else if((u8Peripheral >= APB1_FIRST_NUMBER) && (u8Peripheral < APB1_LAST_NUMBER))
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	da0f      	bge.n	800137a <xRCC_EnableClock+0x9a>
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b9f      	cmp	r3, #159	; 0x9f
 800135e:	d80c      	bhi.n	800137a <xRCC_EnableClock+0x9a>
	{
		/* Minus 128 of the value to operate with the register bits */
		u8Peripheral -= 128;
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	3b80      	subs	r3, #128	; 0x80
 8001364:	71fb      	strb	r3, [r7, #7]

		/* Enable Clock */
		SET_BIT(RCC -> APB1ENR, u8Peripheral);
 8001366:	4913      	ldr	r1, [pc, #76]	; (80013b4 <xRCC_EnableClock+0xd4>)
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <xRCC_EnableClock+0xd4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	2001      	movs	r0, #1
 8001370:	fa00 f202 	lsl.w	r2, r0, r2
 8001374:	4313      	orrs	r3, r2
 8001376:	640b      	str	r3, [r1, #64]	; 0x40
 8001378:	e014      	b.n	80013a4 <xRCC_EnableClock+0xc4>
	}

	/* Check if peripheral number is within APB2 Margins */
	else if((u8Peripheral >= APB2_FIRST_NUMBER) && (u8Peripheral < APB2_LAST_NUMBER))
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b9f      	cmp	r3, #159	; 0x9f
 800137e:	d90f      	bls.n	80013a0 <xRCC_EnableClock+0xc0>
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2bbf      	cmp	r3, #191	; 0xbf
 8001384:	d80c      	bhi.n	80013a0 <xRCC_EnableClock+0xc0>
	{
		/* Minus 160 of the value to operate with the register bits */
		u8Peripheral -= 160;
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	3360      	adds	r3, #96	; 0x60
 800138a:	71fb      	strb	r3, [r7, #7]

		/* Enable Clock */
		SET_BIT(RCC -> APB2ENR, u8Peripheral);
 800138c:	4909      	ldr	r1, [pc, #36]	; (80013b4 <xRCC_EnableClock+0xd4>)
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <xRCC_EnableClock+0xd4>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	4313      	orrs	r3, r2
 800139c:	644b      	str	r3, [r1, #68]	; 0x44
 800139e:	e001      	b.n	80013a4 <xRCC_EnableClock+0xc4>
	}

	else
	{
		/* Number is invalid */
		return NOK;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <xRCC_EnableClock+0xc6>
	}
	/* code is executed succesfully */
	return OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <SysTick_Handler>:
	STK_LOAD = 0;
	STK_VAL = 0;
}

void SysTick_Handler (void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	if(DELAY_X != 0)
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <SysTick_Handler+0x20>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <SysTick_Handler+0x16>
	{
		DELAY_X--;
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Handler+0x20>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <SysTick_Handler+0x20>)
 80013cc:	6013      	str	r3, [r2, #0]
	}
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20000060 	.word	0x20000060

080013dc <_delay_ms>:

void _delay_ms(u32 u32Delay)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	DELAY_X = u32Delay;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <_delay_ms+0x24>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
	while(DELAY_X !=0);
 80013ea:	bf00      	nop
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <_delay_ms+0x24>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1fb      	bne.n	80013ec <_delay_ms+0x10>
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	20000060 	.word	0x20000060

08001404 <vidSYSTICK_Init>:

void vidSYSTICK_Init(u32 u32Load)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(u32Load <=0 || u32Load > 0x00FFFFFF)
	{
		//Do Nothing
	}

	STK_LOAD = u32Load;
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <vidSYSTICK_Init+0x28>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
	STK_VAL  = 0x00;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <vidSYSTICK_Init+0x2c>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
	STK_CTRL = 0x00000007;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <vidSYSTICK_Init+0x30>)
 800141a:	2207      	movs	r2, #7
 800141c:	601a      	str	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e014 	.word	0xe000e014
 8001430:	e000e018 	.word	0xe000e018
 8001434:	e000e010 	.word	0xe000e010

08001438 <vidUSART_Init>:
//	/* Check for data transmission error interrupt */
//	//if()
//}

void vidUSART_Init(USART_REG* USARTx, USART_Config* Config)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
	u32 Temp = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
	vidUSART_InitReg(USARTx);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f885 	bl	8001556 <vidUSART_InitReg>

	USARTx -> CR2 |= (u32)(Config -> StopBit);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	8952      	ldrh	r2, [r2, #10]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	611a      	str	r2, [r3, #16]

	Temp = (u32)(Config -> WordLength | Config -> Parity | Config -> Mode | Config -> OverSampling);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	891a      	ldrh	r2, [r3, #8]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	7b1b      	ldrb	r3, [r3, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	8852      	ldrh	r2, [r2, #2]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
	USARTx -> CR1 |= Temp	;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60da      	str	r2, [r3, #12]


	USARTx -> BRR 	= (u32)Config -> BaudRate;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	609a      	str	r2, [r3, #8]

	//Enable Transmitting or Receiving or Both
	USARTx -> CR1  |= (u32)Config -> Mode;*/

	//Enable Interrupt Generation
	if((Config -> INT == EI_E) && (Config -> INT == CTSIE))
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	89db      	ldrh	r3, [r3, #14]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10c      	bne.n	80014ac <vidUSART_Init+0x74>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	89db      	ldrh	r3, [r3, #14]
 8001496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149a:	d107      	bne.n	80014ac <vidUSART_Init+0x74>
	{
		USARTx -> CR3 |= (u32)Config -> INT;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	89d2      	ldrh	r2, [r2, #14]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	e006      	b.n	80014ba <vidUSART_Init+0x82>
	}
	else
	{
		USARTx -> CR1 |= (u32)Config -> INT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	89d2      	ldrh	r2, [r2, #14]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60da      	str	r2, [r3, #12]
	}

	USARTx->CR2 &= ~(UART_CR2_LINEN | UART_CR2_CLKEN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]
	USARTx->CR3 &= ~(UART_CR3_SCEN | UART_CR3_HDSEL | UART_CR3_IREN);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	615a      	str	r2, [r3, #20]


	//Enable USARTx Transmit/Recieve
	USARTx -> CR1  |= UE;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60da      	str	r2, [r3, #12]
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <vidUSART_SendChar>:

void vidUSART_SendChar(USART_REG* USARTx, u8 u8Char)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	70fb      	strb	r3, [r7, #3]
	//Wait Till Tx Buffer Empty
	while(!(USARTx -> SR & TXE));
 80014f2:	bf00      	nop
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f9      	beq.n	80014f4 <vidUSART_SendChar+0xe>
	USARTx -> DR = u8Char;
 8001500:	78fa      	ldrb	r2, [r7, #3]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	605a      	str	r2, [r3, #4]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <vidUSART_SendString>:

void vidUSART_SendString(USART_REG* USARTx, u8* u8Str, u8 u8Size)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	4613      	mov	r3, r2
 800151e:	71fb      	strb	r3, [r7, #7]
	u8 i =0;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]
	if(0 != u8Str)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d011      	beq.n	800154e <vidUSART_SendString+0x3c>
	{
		for(i=0; i<u8Size; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
 800152e:	e00a      	b.n	8001546 <vidUSART_SendString+0x34>
		{
			vidUSART_SendChar(USARTx, u8Str[i]);
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4413      	add	r3, r2
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ffd3 	bl	80014e6 <vidUSART_SendChar>
		for(i=0; i<u8Size; i++)
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	3301      	adds	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
 8001546:	7dfa      	ldrb	r2, [r7, #23]
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	429a      	cmp	r2, r3
 800154c:	d3f0      	bcc.n	8001530 <vidUSART_SendString+0x1e>
		}
	}
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <vidUSART_InitReg>:
	return temp;

}

void vidUSART_InitReg(USART_REG* USARTx)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
	USARTx->SR 		= 0x000000C0;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	22c0      	movs	r2, #192	; 0xc0
 8001562:	601a      	str	r2, [r3, #0]
	USARTx->BRR		= 0x00000000;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
	USARTx->CR1		= 0x00000000;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	60da      	str	r2, [r3, #12]
	USARTx->CR2		= 0x00000000;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
	USARTx->CR3		= 0x00000000;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
	USARTx->GTPR	= 0x00000000;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f043 0201 	orr.w	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80015ac:	e005      	b.n	80015ba <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0201 	bic.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a15      	ldr	r2, [pc, #84]	; (8001634 <DMA_GetFlagStatus+0x6c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d802      	bhi.n	80015e8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <DMA_GetFlagStatus+0x70>)
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	e001      	b.n	80015ec <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <DMA_GetFlagStatus+0x74>)
 80015ea:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	e002      	b.n	8001604 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800160a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800160e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
 800161e:	e001      	b.n	8001624 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8001624:	7dfb      	ldrb	r3, [r7, #23]
}
 8001626:	4618      	mov	r0, r3
 8001628:	371c      	adds	r7, #28
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	4002640f 	.word	0x4002640f
 8001638:	40026000 	.word	0x40026000
 800163c:	40026400 	.word	0x40026400

08001640 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a10      	ldr	r2, [pc, #64]	; (8001690 <DMA_ClearFlag+0x50>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d802      	bhi.n	8001658 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <DMA_ClearFlag+0x54>)
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e001      	b.n	800165c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <DMA_ClearFlag+0x58>)
 800165a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800166c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8001674:	e006      	b.n	8001684 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800167c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	6093      	str	r3, [r2, #8]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	4002640f 	.word	0x4002640f
 8001694:	40026000 	.word	0x40026000
 8001698:	40026400 	.word	0x40026400

0800169c <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80016be:	e007      	b.n	80016d0 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	801a      	strh	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	0f1b      	lsrs	r3, r3, #28
 80016fa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001702:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3314      	adds	r3, #20
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e005      	b.n	800171e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	3318      	adds	r3, #24
 800171c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
 800172e:	e001      	b.n	8001734 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8001730:	2300      	movs	r3, #0
 8001732:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8001734:	7dfb      	ldrb	r3, [r7, #23]
}
 8001736:	4618      	mov	r0, r3
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 8001748:	4912      	ldr	r1, [pc, #72]	; (8001794 <DMA1_Stream4_IRQHandler+0x50>)
 800174a:	4813      	ldr	r0, [pc, #76]	; (8001798 <DMA1_Stream4_IRQHandler+0x54>)
 800174c:	f7ff ff3c 	bl	80015c8 <DMA_GetFlagStatus>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d01b      	beq.n	800178e <DMA1_Stream4_IRQHandler+0x4a>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8001756:	2100      	movs	r1, #0
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <DMA1_Stream4_IRQHandler+0x54>)
 800175a:	f7ff ff18 	bl	800158e <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <DMA1_Stream4_IRQHandler+0x50>)
 8001760:	480d      	ldr	r0, [pc, #52]	; (8001798 <DMA1_Stream4_IRQHandler+0x54>)
 8001762:	f7ff ff6d 	bl	8001640 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <DMA1_Stream4_IRQHandler+0x58>)
 8001768:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800176c:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 800176e:	bf00      	nop
 8001770:	490b      	ldr	r1, [pc, #44]	; (80017a0 <DMA1_Stream4_IRQHandler+0x5c>)
 8001772:	480c      	ldr	r0, [pc, #48]	; (80017a4 <DMA1_Stream4_IRQHandler+0x60>)
 8001774:	f7ff ffb2 	bl	80016dc <I2C_GetFlagStatus>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f8      	beq.n	8001770 <DMA1_Stream4_IRQHandler+0x2c>
    {
//      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 800177e:	2101      	movs	r1, #1
 8001780:	4808      	ldr	r0, [pc, #32]	; (80017a4 <DMA1_Stream4_IRQHandler+0x60>)
 8001782:	f7ff ff8b 	bl	800169c <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <DMA1_Stream4_IRQHandler+0x64>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
  }
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000020 	.word	0x20000020
 8001798:	40026070 	.word	0x40026070
 800179c:	20000014 	.word	0x20000014
 80017a0:	10000004 	.word	0x10000004
 80017a4:	40005c00 	.word	0x40005c00
 80017a8:	20000064 	.word	0x20000064

080017ac <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 80017b0:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <DMA1_Stream2_IRQHandler+0x3c>)
 80017b6:	f7ff ff07 	bl	80015c8 <DMA_GetFlagStatus>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d010      	beq.n	80017e2 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 80017c0:	2101      	movs	r1, #1
 80017c2:	480a      	ldr	r0, [pc, #40]	; (80017ec <DMA1_Stream2_IRQHandler+0x40>)
 80017c4:	f7ff ff6a 	bl	800169c <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 80017c8:	2100      	movs	r1, #0
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <DMA1_Stream2_IRQHandler+0x3c>)
 80017cc:	f7ff fedf 	bl	800158e <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 80017d0:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <DMA1_Stream2_IRQHandler+0x3c>)
 80017d6:	f7ff ff33 	bl	8001640 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <DMA1_Stream2_IRQHandler+0x44>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2200      	movs	r2, #0
 80017e0:	801a      	strh	r2, [r3, #0]
  }
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40026040 	.word	0x40026040
 80017ec:	40005c00 	.word	0x40005c00
 80017f0:	2000006c 	.word	0x2000006c

080017f4 <main>:
/********************************************************************************/
/**
 * @fn	main function
 */
int main (void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
	/* Variable used as Flag to check debouncing */
	uint8 flag = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	71fb      	strb	r3, [r7, #7]

	uint8 test;
	/* Initialize HW (Clocks, Clocks for GPIO Ports & USART Used) */
	Hardware_Init();
 80017fe:	f000 f833 	bl	8001868 <Hardware_Init>

	/* Port Initialization */
	Port_Init(&Port_Configuration);
 8001802:	4816      	ldr	r0, [pc, #88]	; (800185c <main+0x68>)
 8001804:	f7fe fed8 	bl	80005b8 <Port_Init>

	/* USARTS Initialization */
	USART_Configuration();
 8001808:	f000 f87e 	bl	8001908 <USART_Configuration>

	/* Testing USART1 */
	vidUSART_SendString(USART1, (u8*)"Hello", 6);
 800180c:	2206      	movs	r2, #6
 800180e:	4914      	ldr	r1, [pc, #80]	; (8001860 <main+0x6c>)
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <main+0x70>)
 8001812:	f7ff fe7e 	bl	8001512 <vidUSART_SendString>

	/* Test Dio_WriteChannel With PG13 */
	Dio_WriteChannel(DioConf_LED2_CHANNEL_ID_INDEX, STD_HIGH);
 8001816:	2101      	movs	r1, #1
 8001818:	2001      	movs	r0, #1
 800181a:	f7fe fd99 	bl	8000350 <Dio_WriteChannel>


	while(1)
	{
		/* Test Dio_ReadChannel With PA0  */
		if(Dio_ReadChannel(DioConf_SW1_CHANNEL_ID_INDEX))
 800181e:	2002      	movs	r0, #2
 8001820:	f7fe fd0e 	bl	8000240 <Dio_ReadChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d014      	beq.n	8001854 <main+0x60>
		{
			/* Denouncing Delay */
			_delay_ms(50);
 800182a:	2032      	movs	r0, #50	; 0x32
 800182c:	f7ff fdd6 	bl	80013dc <_delay_ms>

			/* Check again for Button Pressing */
			if(Dio_ReadChannel(DioConf_SW1_CHANNEL_ID_INDEX))
 8001830:	2002      	movs	r0, #2
 8001832:	f7fe fd05 	bl	8000240 <Dio_ReadChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <main+0x2a>
				//Dio_WriteChannel(DioConf_LED2_CHANNEL_ID_INDEX, STD_HIGH);

				/* Test Writing Low in Dio_WriteChannel with PG13 */
				//Dio_WriteChannel(DioConf_LED1_CHANNEL_ID_INDEX, STD_LOW);

				if(flag == 0)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ed      	bne.n	800181e <main+0x2a>
				{
					/* Test Flip Channel API */
					Dio_FlipChannel(DioConf_LED1_CHANNEL_ID_INDEX);
 8001842:	2000      	movs	r0, #0
 8001844:	f7fe fe20 	bl	8000488 <Dio_FlipChannel>

					/* Test Flip Channel API */
					Dio_FlipChannel(DioConf_LED2_CHANNEL_ID_INDEX);
 8001848:	2001      	movs	r0, #1
 800184a:	f7fe fe1d 	bl	8000488 <Dio_FlipChannel>

					flag = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	e7e4      	b.n	800181e <main+0x2a>

			}
		}
		else
		{
			flag = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	71fb      	strb	r3, [r7, #7]
		if(Dio_ReadChannel(DioConf_SW1_CHANNEL_ID_INDEX))
 8001858:	e7e1      	b.n	800181e <main+0x2a>
 800185a:	bf00      	nop
 800185c:	08001bf8 	.word	0x08001bf8
 8001860:	08001be0 	.word	0x08001be0
 8001864:	40011000 	.word	0x40011000

08001868 <Hardware_Init>:
 *	 	 	- Enable Clock for GPIOA & GPIOC & GPIOG
 *	 	 	- Enable Clock for USART1, 2 & 4
 *
 */
static void Hardware_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
	/* RCC Configuration structure */
	RCC_config rcc_configurations = {0};
 800186e:	463b      	mov	r3, r7
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	615a      	str	r2, [r3, #20]
	 * - SYSCLK Source is PLL											 *
	 * - AHB  Clock = SYSCLK											 *
	 * - APB1 Clock = AHB Clock / 2									     *
	 * - APB2 Clock = AHB Clock									         *
	 *********************************************************************/
	rcc_configurations.OscillatorType 	= OSCILLATOR_TYPE_HSE;
 800187e:	2301      	movs	r3, #1
 8001880:	703b      	strb	r3, [r7, #0]
	rcc_configurations.SYSCLKSource		= SYSCLK_SOURCE_PLL;
 8001882:	2302      	movs	r3, #2
 8001884:	707b      	strb	r3, [r7, #1]
	rcc_configurations.AHBDivisor		= AHB_NOT_DIVIDED;
 8001886:	2300      	movs	r3, #0
 8001888:	70bb      	strb	r3, [r7, #2]
	rcc_configurations.APB1Divisor		= APB_DIVIDED_BY_2;
 800188a:	2304      	movs	r3, #4
 800188c:	70fb      	strb	r3, [r7, #3]
	rcc_configurations.APB2Divisor		= APB_NOT_DIVIDED;
 800188e:	2300      	movs	r3, #0
 8001890:	713b      	strb	r3, [r7, #4]
	rcc_configurations.PLL.PLLStateMain	= PLL_STATE_MAIN_ON;
 8001892:	2301      	movs	r3, #1
 8001894:	71bb      	strb	r3, [r7, #6]

	rcc_configurations.PLL.PLLSource	= PLL_SOURCE_HSE;
 8001896:	2301      	movs	r3, #1
 8001898:	727b      	strb	r3, [r7, #9]
	rcc_configurations.PLL.PLLM			= 4;
 800189a:	2304      	movs	r3, #4
 800189c:	72bb      	strb	r3, [r7, #10]
	rcc_configurations.PLL.PLLN			= 80;
 800189e:	2350      	movs	r3, #80	; 0x50
 80018a0:	827b      	strh	r3, [r7, #18]
	rcc_configurations.PLL.PLLP			= PLLP_VALUE_2;
 80018a2:	2300      	movs	r3, #0
 80018a4:	72fb      	strb	r3, [r7, #11]
	rcc_configurations.PLL.PLLQ			= 3;
 80018a6:	2303      	movs	r3, #3
 80018a8:	733b      	strb	r3, [r7, #12]
	/*---------------------------------------------------------------------*/

	/* Initialize Registers */
	xRCC_regInit();
 80018aa:	f7ff fa01 	bl	8000cb0 <xRCC_regInit>

	/* Initialize RCC & Config PLLs */
	xRCC_init(&rcc_configurations);
 80018ae:	463b      	mov	r3, r7
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fa63 	bl	8000d7c <xRCC_init>

	/* Get Clock Values */
	xRCC_getClocks(&clock_values);
 80018b6:	4812      	ldr	r0, [pc, #72]	; (8001900 <Hardware_Init+0x98>)
 80018b8:	f7ff fc64 	bl	8001184 <xRCC_getClocks>

	/* Initialize SYSTICK with Freq - 1 (Step) */
	vidSYSTICK_Init(( (clock_values.SYSCLKFrequency) / 1000) );
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <Hardware_Init+0x98>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a10      	ldr	r2, [pc, #64]	; (8001904 <Hardware_Init+0x9c>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	099b      	lsrs	r3, r3, #6
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fd9b 	bl	8001404 <vidSYSTICK_Init>

	/* Enable GPIOA Clock (For USART2) */
	xRCC_EnableClock(RCC_GPIOA);
 80018ce:	2000      	movs	r0, #0
 80018d0:	f7ff fd06 	bl	80012e0 <xRCC_EnableClock>

	/* Enable GPIOC Clock (For UART4)*/
	xRCC_EnableClock(RCC_GPIOC);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f7ff fd03 	bl	80012e0 <xRCC_EnableClock>

	/* Enable GPIOG Clock for F429 on board Kits LEDs */
	xRCC_EnableClock(RCC_GPIOG);
 80018da:	2006      	movs	r0, #6
 80018dc:	f7ff fd00 	bl	80012e0 <xRCC_EnableClock>

	/* Enable USART1 Clock */
	xRCC_EnableClock(RCC_USART1);
 80018e0:	20a4      	movs	r0, #164	; 0xa4
 80018e2:	f7ff fcfd 	bl	80012e0 <xRCC_EnableClock>

	/* Enable USART2 Clock */
	xRCC_EnableClock(RCC_USART2);
 80018e6:	2091      	movs	r0, #145	; 0x91
 80018e8:	f7ff fcfa 	bl	80012e0 <xRCC_EnableClock>

	/* Enable USART3 Clock */
	xRCC_EnableClock(RCC_USART3);
 80018ec:	2092      	movs	r0, #146	; 0x92
 80018ee:	f7ff fcf7 	bl	80012e0 <xRCC_EnableClock>

	/* Enable USART6 Clock */
	xRCC_EnableClock(RCC_USART4);
 80018f2:	2093      	movs	r0, #147	; 0x93
 80018f4:	f7ff fcf4 	bl	80012e0 <xRCC_EnableClock>

}
 80018f8:	bf00      	nop
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000040 	.word	0x20000040
 8001904:	10624dd3 	.word	0x10624dd3

08001908 <USART_Configuration>:
 [out]				None
 [in/out]			None
 [Returns]:			None
 **********************************************************************************************/
static void USART_Configuration(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0

	/* works on APB2 Clock = 72 MHz */
	husart.Parity   		= NO;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <USART_Configuration+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	801a      	strh	r2, [r3, #0]
	husart.OverSampling		= NO;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <USART_Configuration+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	805a      	strh	r2, [r3, #2]
	husart.WordLength 		= Data_Bits_8;
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <USART_Configuration+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	811a      	strh	r2, [r3, #8]
	husart.StopBit			= One_Bit;
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <USART_Configuration+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	815a      	strh	r2, [r3, #10]
	husart.Mode				= (Receiver | Transmitter);
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <USART_Configuration+0x64>)
 8001926:	220c      	movs	r2, #12
 8001928:	731a      	strb	r2, [r3, #12]
	//husart.BaudRate 		= 0x271;	/* Baud Rate Calculations with APB2 = 72 MHz */
	husart.BaudRate 		= 0x2B7;	/* Baud Rate Calculations with APB2 = 80 MHz */
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <USART_Configuration+0x64>)
 800192c:	f240 22b7 	movw	r2, #695	; 0x2b7
 8001930:	605a      	str	r2, [r3, #4]

	vidUSART_Init(USART1, &husart);
 8001932:	490e      	ldr	r1, [pc, #56]	; (800196c <USART_Configuration+0x64>)
 8001934:	480e      	ldr	r0, [pc, #56]	; (8001970 <USART_Configuration+0x68>)
 8001936:	f7ff fd7f 	bl	8001438 <vidUSART_Init>


	/* USART6 Configurations */
	husart.Parity   		= NO;
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <USART_Configuration+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	801a      	strh	r2, [r3, #0]
	husart.OverSampling		= NO;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <USART_Configuration+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	805a      	strh	r2, [r3, #2]
	husart.WordLength 		= Data_Bits_8;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <USART_Configuration+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	811a      	strh	r2, [r3, #8]
	husart.StopBit			= One_Bit;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <USART_Configuration+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	815a      	strh	r2, [r3, #10]
	husart.Mode				= (Receiver | Transmitter);
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <USART_Configuration+0x64>)
 8001954:	220c      	movs	r2, #12
 8001956:	731a      	strb	r2, [r3, #12]
	//husart.BaudRate 		= 0x271;	/* Baud Rate Calculations with APB2 = 72 MHz */
	husart.BaudRate 		= 0x15C;	/* Baud Rate Calculations with APB1 = 40 MHz */
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <USART_Configuration+0x64>)
 800195a:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 800195e:	605a      	str	r2, [r3, #4]
	/* Set USART6 with same Configurations */
	vidUSART_Init(UART4, &husart);
 8001960:	4902      	ldr	r1, [pc, #8]	; (800196c <USART_Configuration+0x64>)
 8001962:	4804      	ldr	r0, [pc, #16]	; (8001974 <USART_Configuration+0x6c>)
 8001964:	f7ff fd68 	bl	8001438 <vidUSART_Init>

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000050 	.word	0x20000050
 8001970:	40011000 	.word	0x40011000
 8001974:	40004c00 	.word	0x40004c00

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800197c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800197e:	e003      	b.n	8001988 <LoopCopyDataInit>

08001980 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001982:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001984:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001986:	3104      	adds	r1, #4

08001988 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800198c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800198e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001990:	d3f6      	bcc.n	8001980 <CopyDataInit>
  ldr  r2, =_sbss
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001994:	e002      	b.n	800199c <LoopFillZerobss>

08001996 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001996:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001998:	f842 3b04 	str.w	r3, [r2], #4

0800199c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800199e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019a0:	d3f9      	bcc.n	8001996 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a2:	f000 f83b 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019a6:	f000 f8eb 	bl	8001b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7ff ff23 	bl	80017f4 <main>
  bx  lr    
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019b0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80019b4:	08001d88 	.word	0x08001d88
  ldr  r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019bc:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80019c0:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80019c4:	20000070 	.word	0x20000070

080019c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC_IRQHandler>

080019ca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <HardFault_Handler+0x4>

080019de <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <MemManage_Handler+0x4>

080019e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <BusFault_Handler+0x4>

080019ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <UsageFault_Handler+0x4>

080019f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a20:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <SystemInit+0x60>)
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <SystemInit+0x60>)
 8001a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a30:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <SystemInit+0x64>)
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <SystemInit+0x64>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <SystemInit+0x64>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <SystemInit+0x64>)
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <SystemInit+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <SystemInit+0x64>)
 8001a54:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <SystemInit+0x68>)
 8001a56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a58:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <SystemInit+0x64>)
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <SystemInit+0x64>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001a6a:	f000 f80d 	bl	8001a88 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a6e:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <SystemInit+0x60>)
 8001a70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a74:	609a      	str	r2, [r3, #8]
#endif
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	40023800 	.word	0x40023800
 8001a84:	24003010 	.word	0x24003010

08001a88 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001a96:	4a36      	ldr	r2, [pc, #216]	; (8001b70 <SetSysClock+0xe8>)
 8001a98:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <SetSysClock+0xe8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <SetSysClock+0xe8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d103      	bne.n	8001ac0 <SetSysClock+0x38>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001abe:	d1f0      	bne.n	8001aa2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <SetSysClock+0xe8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001acc:	2301      	movs	r3, #1
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	e001      	b.n	8001ad6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d102      	bne.n	8001ae2 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <SetSysClock+0xe8>)
 8001ade:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <SetSysClock+0xec>)
 8001ae0:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <SetSysClock+0xe8>)
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <SetSysClock+0xe8>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <SetSysClock+0xf0>)
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <SetSysClock+0xf0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af8:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <SetSysClock+0xe8>)
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <SetSysClock+0xe8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001b02:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <SetSysClock+0xe8>)
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <SetSysClock+0xe8>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001b0e:	4a18      	ldr	r2, [pc, #96]	; (8001b70 <SetSysClock+0xe8>)
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <SetSysClock+0xe8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001b18:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001b1a:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <SetSysClock+0xe8>)
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <SetSysClock+0xe8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b24:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001b26:	bf00      	nop
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <SetSysClock+0xe8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f9      	beq.n	8001b28 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <SetSysClock+0xf4>)
 8001b36:	f240 7205 	movw	r2, #1797	; 0x705
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <SetSysClock+0xe8>)
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <SetSysClock+0xe8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001b48:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <SetSysClock+0xe8>)
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <SetSysClock+0xe8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001b54:	bf00      	nop
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <SetSysClock+0xe8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d1f9      	bne.n	8001b56 <SetSysClock+0xce>
    {
    }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	07405a08 	.word	0x07405a08
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <__libc_init_array>:
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	4e0d      	ldr	r6, [pc, #52]	; (8001bb8 <__libc_init_array+0x38>)
 8001b84:	4c0d      	ldr	r4, [pc, #52]	; (8001bbc <__libc_init_array+0x3c>)
 8001b86:	1ba4      	subs	r4, r4, r6
 8001b88:	10a4      	asrs	r4, r4, #2
 8001b8a:	2500      	movs	r5, #0
 8001b8c:	42a5      	cmp	r5, r4
 8001b8e:	d109      	bne.n	8001ba4 <__libc_init_array+0x24>
 8001b90:	4e0b      	ldr	r6, [pc, #44]	; (8001bc0 <__libc_init_array+0x40>)
 8001b92:	4c0c      	ldr	r4, [pc, #48]	; (8001bc4 <__libc_init_array+0x44>)
 8001b94:	f000 f818 	bl	8001bc8 <_init>
 8001b98:	1ba4      	subs	r4, r4, r6
 8001b9a:	10a4      	asrs	r4, r4, #2
 8001b9c:	2500      	movs	r5, #0
 8001b9e:	42a5      	cmp	r5, r4
 8001ba0:	d105      	bne.n	8001bae <__libc_init_array+0x2e>
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
 8001ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba8:	4798      	blx	r3
 8001baa:	3501      	adds	r5, #1
 8001bac:	e7ee      	b.n	8001b8c <__libc_init_array+0xc>
 8001bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bb2:	4798      	blx	r3
 8001bb4:	3501      	adds	r5, #1
 8001bb6:	e7f2      	b.n	8001b9e <__libc_init_array+0x1e>
 8001bb8:	08001d80 	.word	0x08001d80
 8001bbc:	08001d80 	.word	0x08001d80
 8001bc0:	08001d80 	.word	0x08001d80
 8001bc4:	08001d84 	.word	0x08001d84

08001bc8 <_init>:
 8001bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bca:	bf00      	nop
 8001bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bce:	bc08      	pop	{r3}
 8001bd0:	469e      	mov	lr, r3
 8001bd2:	4770      	bx	lr

08001bd4 <_fini>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr
